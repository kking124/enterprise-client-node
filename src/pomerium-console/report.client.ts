// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "report.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Report } from "./report";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PolicyReportResponse } from "./report";
import type { PolicyReportRequest } from "./report";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pomerium.dashboard.Report
 */
export interface IReportClient {
    /**
     * PolicyReport generates a policy report
     *
     * @generated from protobuf rpc: PolicyReport(pomerium.dashboard.PolicyReportRequest) returns (pomerium.dashboard.PolicyReportResponse);
     */
    policyReport(input: PolicyReportRequest, options?: RpcOptions): UnaryCall<PolicyReportRequest, PolicyReportResponse>;
}
/**
 * @generated from protobuf service pomerium.dashboard.Report
 */
export class ReportClient implements IReportClient, ServiceInfo {
    typeName = Report.typeName;
    methods = Report.methods;
    options = Report.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * PolicyReport generates a policy report
     *
     * @generated from protobuf rpc: PolicyReport(pomerium.dashboard.PolicyReportRequest) returns (pomerium.dashboard.PolicyReportResponse);
     */
    policyReport(input: PolicyReportRequest, options?: RpcOptions): UnaryCall<PolicyReportRequest, PolicyReportResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PolicyReportRequest, PolicyReportResponse>("unary", this._transport, method, opt, input);
    }
}
