// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "databroker_svc.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Record } from "./github.com/pomerium/pomerium/pkg/grpc/databroker/databroker";
/**
 * @generated from protobuf message pomerium.dashboard.ListDataBrokerRecordsRequest
 */
export interface ListDataBrokerRecordsRequest {
    /**
     * @generated from protobuf field: string record_type = 1;
     */
    recordType: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDataBrokerRecordsResponse
 */
export interface ListDataBrokerRecordsResponse {
    /**
     * @generated from protobuf field: repeated databroker.Record records = 1;
     */
    records: Record[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDataBrokerRecordTypesResponse
 */
export interface ListDataBrokerRecordTypesResponse {
    /**
     * @generated from protobuf field: repeated string record_types = 1;
     */
    recordTypes: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListDataBrokerRecordsRequest$Type extends MessageType<ListDataBrokerRecordsRequest> {
    constructor() {
        super("pomerium.dashboard.ListDataBrokerRecordsRequest", [
            { no: 1, name: "record_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDataBrokerRecordsRequest>): ListDataBrokerRecordsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordType = "";
        if (value !== undefined)
            reflectionMergePartial<ListDataBrokerRecordsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDataBrokerRecordsRequest): ListDataBrokerRecordsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string record_type */ 1:
                    message.recordType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDataBrokerRecordsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string record_type = 1; */
        if (message.recordType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recordType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDataBrokerRecordsRequest
 */
export const ListDataBrokerRecordsRequest = new ListDataBrokerRecordsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDataBrokerRecordsResponse$Type extends MessageType<ListDataBrokerRecordsResponse> {
    constructor() {
        super("pomerium.dashboard.ListDataBrokerRecordsResponse", [
            { no: 1, name: "records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Record }
        ]);
    }
    create(value?: PartialMessage<ListDataBrokerRecordsResponse>): ListDataBrokerRecordsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.records = [];
        if (value !== undefined)
            reflectionMergePartial<ListDataBrokerRecordsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDataBrokerRecordsResponse): ListDataBrokerRecordsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated databroker.Record records */ 1:
                    message.records.push(Record.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDataBrokerRecordsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated databroker.Record records = 1; */
        for (let i = 0; i < message.records.length; i++)
            Record.internalBinaryWrite(message.records[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDataBrokerRecordsResponse
 */
export const ListDataBrokerRecordsResponse = new ListDataBrokerRecordsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDataBrokerRecordTypesResponse$Type extends MessageType<ListDataBrokerRecordTypesResponse> {
    constructor() {
        super("pomerium.dashboard.ListDataBrokerRecordTypesResponse", [
            { no: 1, name: "record_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDataBrokerRecordTypesResponse>): ListDataBrokerRecordTypesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListDataBrokerRecordTypesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDataBrokerRecordTypesResponse): ListDataBrokerRecordTypesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string record_types */ 1:
                    message.recordTypes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDataBrokerRecordTypesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string record_types = 1; */
        for (let i = 0; i < message.recordTypes.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.recordTypes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDataBrokerRecordTypesResponse
 */
export const ListDataBrokerRecordTypesResponse = new ListDataBrokerRecordTypesResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.DataBroker
 */
export const DataBroker = new ServiceType("pomerium.dashboard.DataBroker", [
    { name: "ListDataBrokerRecords", options: {}, I: ListDataBrokerRecordsRequest, O: ListDataBrokerRecordsResponse },
    { name: "ListDataBrokerRecordTypes", options: {}, I: Empty, O: ListDataBrokerRecordTypesResponse }
]);
