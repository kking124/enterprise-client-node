// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "external_data_sources.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message pomerium.dashboard.ExternalDataSource
 */
export interface ExternalDataSource {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * Url is th URL to query for data.
     *
     * @generated from protobuf field: string url = 5;
     */
    url: string;
    /**
     * RecordType is how the queried records will be stored in the databroker.
     *
     * @generated from protobuf field: string record_type = 6;
     */
    recordType: string;
    /**
     * ForeignKey is the key referenced for policy evaluation. E.g. user.id.
     *
     * @generated from protobuf field: string foreign_key = 7;
     */
    foreignKey: string;
    /**
     * Headers are request headers sent to the external data source.
     *
     * @generated from protobuf field: map<string, string> headers = 8;
     */
    headers: {
        [key: string]: string;
    };
    /**
     * AllowInsecureTls ignores TLS errors from the external data source.
     *
     * @generated from protobuf field: optional bool allow_insecure_tls = 9;
     */
    allowInsecureTls?: boolean;
    /**
     * ClientTlsKeyId is the key pair used for TLS to the external data source.
     *
     * @generated from protobuf field: optional string client_tls_key_id = 10;
     */
    clientTlsKeyId?: string;
    /**
     * PollingMinDelay is the minimum amount of time to wait before polling again.
     *
     * @generated from protobuf field: optional google.protobuf.Duration polling_min_delay = 11;
     */
    pollingMinDelay?: Duration;
    /**
     * PollingMaxDelay is the maximum amount of time to wait before polling again.
     *
     * @generated from protobuf field: optional google.protobuf.Duration polling_max_delay = 12;
     */
    pollingMaxDelay?: Duration;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteExternalDataSourceRequest
 */
export interface DeleteExternalDataSourceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetExternalDataSourceRequest
 */
export interface GetExternalDataSourceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetExternalDataSourceResponse
 */
export interface GetExternalDataSourceResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.ExternalDataSource external_data_source = 1;
     */
    externalDataSource?: ExternalDataSource;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourcesRequest
 */
export interface ListExternalDataSourcesRequest {
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourcesResponse
 */
export interface ListExternalDataSourcesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.ExternalDataSource external_data_sources = 1;
     */
    externalDataSources: ExternalDataSource[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourceRecordTypesRequest
 */
export interface ListExternalDataSourceRecordTypesRequest {
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourceRecordTypesResponse
 */
export interface ListExternalDataSourceRecordTypesResponse {
    /**
     * @generated from protobuf field: repeated string record_types = 1;
     */
    recordTypes: string[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourceRecordFieldsRequest
 */
export interface ListExternalDataSourceRecordFieldsRequest {
    /**
     * @generated from protobuf field: string record_type = 1;
     */
    recordType: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListExternalDataSourceRecordFieldsResponse
 */
export interface ListExternalDataSourceRecordFieldsResponse {
    /**
     * @generated from protobuf field: repeated string record_fields = 1;
     */
    recordFields: string[];
}
/**
 * @generated from protobuf message pomerium.dashboard.SetExternalDataSourceRequest
 */
export interface SetExternalDataSourceRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.ExternalDataSource external_data_source = 1;
     */
    externalDataSource?: ExternalDataSource;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetExternalDataSourceResponse
 */
export interface SetExternalDataSourceResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.ExternalDataSource external_data_source = 1;
     */
    externalDataSource?: ExternalDataSource;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExternalDataSource$Type extends MessageType<ExternalDataSource> {
    constructor() {
        super("pomerium.dashboard.ExternalDataSource", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "record_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "foreign_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "headers", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 9, name: "allow_insecure_tls", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "client_tls_key_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "polling_min_delay", kind: "message", T: () => Duration },
            { no: 12, name: "polling_max_delay", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<ExternalDataSource>): ExternalDataSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.url = "";
        message.recordType = "";
        message.foreignKey = "";
        message.headers = {};
        if (value !== undefined)
            reflectionMergePartial<ExternalDataSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExternalDataSource): ExternalDataSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string url */ 5:
                    message.url = reader.string();
                    break;
                case /* string record_type */ 6:
                    message.recordType = reader.string();
                    break;
                case /* string foreign_key */ 7:
                    message.foreignKey = reader.string();
                    break;
                case /* map<string, string> headers */ 8:
                    this.binaryReadMap8(message.headers, reader, options);
                    break;
                case /* optional bool allow_insecure_tls */ 9:
                    message.allowInsecureTls = reader.bool();
                    break;
                case /* optional string client_tls_key_id */ 10:
                    message.clientTlsKeyId = reader.string();
                    break;
                case /* optional google.protobuf.Duration polling_min_delay */ 11:
                    message.pollingMinDelay = Duration.internalBinaryRead(reader, reader.uint32(), options, message.pollingMinDelay);
                    break;
                case /* optional google.protobuf.Duration polling_max_delay */ 12:
                    message.pollingMaxDelay = Duration.internalBinaryRead(reader, reader.uint32(), options, message.pollingMaxDelay);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: ExternalDataSource["headers"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ExternalDataSource["headers"] | undefined, val: ExternalDataSource["headers"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field pomerium.dashboard.ExternalDataSource.headers");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ExternalDataSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string url = 5; */
        if (message.url !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.url);
        /* string record_type = 6; */
        if (message.recordType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.recordType);
        /* string foreign_key = 7; */
        if (message.foreignKey !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.foreignKey);
        /* map<string, string> headers = 8; */
        for (let k of globalThis.Object.keys(message.headers))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.headers[k]).join();
        /* optional bool allow_insecure_tls = 9; */
        if (message.allowInsecureTls !== undefined)
            writer.tag(9, WireType.Varint).bool(message.allowInsecureTls);
        /* optional string client_tls_key_id = 10; */
        if (message.clientTlsKeyId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.clientTlsKeyId);
        /* optional google.protobuf.Duration polling_min_delay = 11; */
        if (message.pollingMinDelay)
            Duration.internalBinaryWrite(message.pollingMinDelay, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Duration polling_max_delay = 12; */
        if (message.pollingMaxDelay)
            Duration.internalBinaryWrite(message.pollingMaxDelay, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ExternalDataSource
 */
export const ExternalDataSource = new ExternalDataSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteExternalDataSourceRequest$Type extends MessageType<DeleteExternalDataSourceRequest> {
    constructor() {
        super("pomerium.dashboard.DeleteExternalDataSourceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteExternalDataSourceRequest>): DeleteExternalDataSourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteExternalDataSourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteExternalDataSourceRequest): DeleteExternalDataSourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteExternalDataSourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteExternalDataSourceRequest
 */
export const DeleteExternalDataSourceRequest = new DeleteExternalDataSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExternalDataSourceRequest$Type extends MessageType<GetExternalDataSourceRequest> {
    constructor() {
        super("pomerium.dashboard.GetExternalDataSourceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetExternalDataSourceRequest>): GetExternalDataSourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetExternalDataSourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExternalDataSourceRequest): GetExternalDataSourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExternalDataSourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetExternalDataSourceRequest
 */
export const GetExternalDataSourceRequest = new GetExternalDataSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExternalDataSourceResponse$Type extends MessageType<GetExternalDataSourceResponse> {
    constructor() {
        super("pomerium.dashboard.GetExternalDataSourceResponse", [
            { no: 1, name: "external_data_source", kind: "message", T: () => ExternalDataSource }
        ]);
    }
    create(value?: PartialMessage<GetExternalDataSourceResponse>): GetExternalDataSourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetExternalDataSourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExternalDataSourceResponse): GetExternalDataSourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.ExternalDataSource external_data_source */ 1:
                    message.externalDataSource = ExternalDataSource.internalBinaryRead(reader, reader.uint32(), options, message.externalDataSource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExternalDataSourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.ExternalDataSource external_data_source = 1; */
        if (message.externalDataSource)
            ExternalDataSource.internalBinaryWrite(message.externalDataSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetExternalDataSourceResponse
 */
export const GetExternalDataSourceResponse = new GetExternalDataSourceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourcesRequest$Type extends MessageType<ListExternalDataSourcesRequest> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourcesRequest", []);
    }
    create(value?: PartialMessage<ListExternalDataSourcesRequest>): ListExternalDataSourcesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourcesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourcesRequest): ListExternalDataSourcesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListExternalDataSourcesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourcesRequest
 */
export const ListExternalDataSourcesRequest = new ListExternalDataSourcesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourcesResponse$Type extends MessageType<ListExternalDataSourcesResponse> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourcesResponse", [
            { no: 1, name: "external_data_sources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExternalDataSource }
        ]);
    }
    create(value?: PartialMessage<ListExternalDataSourcesResponse>): ListExternalDataSourcesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.externalDataSources = [];
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourcesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourcesResponse): ListExternalDataSourcesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.ExternalDataSource external_data_sources */ 1:
                    message.externalDataSources.push(ExternalDataSource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListExternalDataSourcesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.ExternalDataSource external_data_sources = 1; */
        for (let i = 0; i < message.externalDataSources.length; i++)
            ExternalDataSource.internalBinaryWrite(message.externalDataSources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourcesResponse
 */
export const ListExternalDataSourcesResponse = new ListExternalDataSourcesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourceRecordTypesRequest$Type extends MessageType<ListExternalDataSourceRecordTypesRequest> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourceRecordTypesRequest", []);
    }
    create(value?: PartialMessage<ListExternalDataSourceRecordTypesRequest>): ListExternalDataSourceRecordTypesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourceRecordTypesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourceRecordTypesRequest): ListExternalDataSourceRecordTypesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListExternalDataSourceRecordTypesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourceRecordTypesRequest
 */
export const ListExternalDataSourceRecordTypesRequest = new ListExternalDataSourceRecordTypesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourceRecordTypesResponse$Type extends MessageType<ListExternalDataSourceRecordTypesResponse> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourceRecordTypesResponse", [
            { no: 1, name: "record_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListExternalDataSourceRecordTypesResponse>): ListExternalDataSourceRecordTypesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourceRecordTypesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourceRecordTypesResponse): ListExternalDataSourceRecordTypesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string record_types */ 1:
                    message.recordTypes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListExternalDataSourceRecordTypesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string record_types = 1; */
        for (let i = 0; i < message.recordTypes.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.recordTypes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourceRecordTypesResponse
 */
export const ListExternalDataSourceRecordTypesResponse = new ListExternalDataSourceRecordTypesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourceRecordFieldsRequest$Type extends MessageType<ListExternalDataSourceRecordFieldsRequest> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourceRecordFieldsRequest", [
            { no: 1, name: "record_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListExternalDataSourceRecordFieldsRequest>): ListExternalDataSourceRecordFieldsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordType = "";
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourceRecordFieldsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourceRecordFieldsRequest): ListExternalDataSourceRecordFieldsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string record_type */ 1:
                    message.recordType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListExternalDataSourceRecordFieldsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string record_type = 1; */
        if (message.recordType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recordType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourceRecordFieldsRequest
 */
export const ListExternalDataSourceRecordFieldsRequest = new ListExternalDataSourceRecordFieldsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListExternalDataSourceRecordFieldsResponse$Type extends MessageType<ListExternalDataSourceRecordFieldsResponse> {
    constructor() {
        super("pomerium.dashboard.ListExternalDataSourceRecordFieldsResponse", [
            { no: 1, name: "record_fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListExternalDataSourceRecordFieldsResponse>): ListExternalDataSourceRecordFieldsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordFields = [];
        if (value !== undefined)
            reflectionMergePartial<ListExternalDataSourceRecordFieldsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListExternalDataSourceRecordFieldsResponse): ListExternalDataSourceRecordFieldsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string record_fields */ 1:
                    message.recordFields.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListExternalDataSourceRecordFieldsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string record_fields = 1; */
        for (let i = 0; i < message.recordFields.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.recordFields[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListExternalDataSourceRecordFieldsResponse
 */
export const ListExternalDataSourceRecordFieldsResponse = new ListExternalDataSourceRecordFieldsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetExternalDataSourceRequest$Type extends MessageType<SetExternalDataSourceRequest> {
    constructor() {
        super("pomerium.dashboard.SetExternalDataSourceRequest", [
            { no: 1, name: "external_data_source", kind: "message", T: () => ExternalDataSource }
        ]);
    }
    create(value?: PartialMessage<SetExternalDataSourceRequest>): SetExternalDataSourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetExternalDataSourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetExternalDataSourceRequest): SetExternalDataSourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.ExternalDataSource external_data_source */ 1:
                    message.externalDataSource = ExternalDataSource.internalBinaryRead(reader, reader.uint32(), options, message.externalDataSource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetExternalDataSourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.ExternalDataSource external_data_source = 1; */
        if (message.externalDataSource)
            ExternalDataSource.internalBinaryWrite(message.externalDataSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetExternalDataSourceRequest
 */
export const SetExternalDataSourceRequest = new SetExternalDataSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetExternalDataSourceResponse$Type extends MessageType<SetExternalDataSourceResponse> {
    constructor() {
        super("pomerium.dashboard.SetExternalDataSourceResponse", [
            { no: 1, name: "external_data_source", kind: "message", T: () => ExternalDataSource }
        ]);
    }
    create(value?: PartialMessage<SetExternalDataSourceResponse>): SetExternalDataSourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetExternalDataSourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetExternalDataSourceResponse): SetExternalDataSourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.ExternalDataSource external_data_source */ 1:
                    message.externalDataSource = ExternalDataSource.internalBinaryRead(reader, reader.uint32(), options, message.externalDataSource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetExternalDataSourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.ExternalDataSource external_data_source = 1; */
        if (message.externalDataSource)
            ExternalDataSource.internalBinaryWrite(message.externalDataSource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetExternalDataSourceResponse
 */
export const SetExternalDataSourceResponse = new SetExternalDataSourceResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.ExternalDataSourceService
 */
export const ExternalDataSourceService = new ServiceType("pomerium.dashboard.ExternalDataSourceService", [
    { name: "DeleteExternalDataSource", options: {}, I: DeleteExternalDataSourceRequest, O: Empty },
    { name: "GetExternalDataSource", options: {}, I: GetExternalDataSourceRequest, O: GetExternalDataSourceResponse },
    { name: "ListExternalDataSources", options: {}, I: ListExternalDataSourcesRequest, O: ListExternalDataSourcesResponse },
    { name: "ListExternalDataSourceRecordTypes", options: {}, I: ListExternalDataSourceRecordTypesRequest, O: ListExternalDataSourceRecordTypesResponse },
    { name: "ListExternalDataSourceRecordFields", options: {}, I: ListExternalDataSourceRecordFieldsRequest, O: ListExternalDataSourceRecordFieldsResponse },
    { name: "SetExternalDataSource", options: {}, I: SetExternalDataSourceRequest, O: SetExternalDataSourceResponse }
]);
