// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "settings.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SettingsService } from "./settings";
import type { GetConsoleSettingsResponse } from "./settings";
import type { GetConsoleSettingsRequest } from "./settings";
import type { SetSettingsResponse } from "./settings";
import type { SetSettingsRequest } from "./settings";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSettingsResponse } from "./settings";
import type { GetSettingsRequest } from "./settings";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * SettingsService manages global pomerium settings
 *
 * @generated from protobuf service pomerium.dashboard.SettingsService
 */
export interface ISettingsServiceClient {
    /**
     * GetSettings retrieves the currently applied settings
     *
     * @generated from protobuf rpc: GetSettings(pomerium.dashboard.GetSettingsRequest) returns (pomerium.dashboard.GetSettingsResponse);
     */
    getSettings(input: GetSettingsRequest, options?: RpcOptions): UnaryCall<GetSettingsRequest, GetSettingsResponse>;
    /**
     * SetSettings applies new global settings
     *
     * @generated from protobuf rpc: SetSettings(pomerium.dashboard.SetSettingsRequest) returns (pomerium.dashboard.SetSettingsResponse);
     */
    setSettings(input: SetSettingsRequest, options?: RpcOptions): UnaryCall<SetSettingsRequest, SetSettingsResponse>;
    /**
     * GetBrandingSettings retrieves just the branding part of the settings
     *
     * @generated from protobuf rpc: GetBrandingSettings(pomerium.dashboard.GetSettingsRequest) returns (pomerium.dashboard.GetSettingsResponse);
     */
    getBrandingSettings(input: GetSettingsRequest, options?: RpcOptions): UnaryCall<GetSettingsRequest, GetSettingsResponse>;
    /**
     * GetConsoleSettings retrieves the console settings.
     *
     * @generated from protobuf rpc: GetConsoleSettings(pomerium.dashboard.GetConsoleSettingsRequest) returns (pomerium.dashboard.GetConsoleSettingsResponse);
     */
    getConsoleSettings(input: GetConsoleSettingsRequest, options?: RpcOptions): UnaryCall<GetConsoleSettingsRequest, GetConsoleSettingsResponse>;
}
/**
 * SettingsService manages global pomerium settings
 *
 * @generated from protobuf service pomerium.dashboard.SettingsService
 */
export class SettingsServiceClient implements ISettingsServiceClient, ServiceInfo {
    typeName = SettingsService.typeName;
    methods = SettingsService.methods;
    options = SettingsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetSettings retrieves the currently applied settings
     *
     * @generated from protobuf rpc: GetSettings(pomerium.dashboard.GetSettingsRequest) returns (pomerium.dashboard.GetSettingsResponse);
     */
    getSettings(input: GetSettingsRequest, options?: RpcOptions): UnaryCall<GetSettingsRequest, GetSettingsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSettingsRequest, GetSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetSettings applies new global settings
     *
     * @generated from protobuf rpc: SetSettings(pomerium.dashboard.SetSettingsRequest) returns (pomerium.dashboard.SetSettingsResponse);
     */
    setSettings(input: SetSettingsRequest, options?: RpcOptions): UnaryCall<SetSettingsRequest, SetSettingsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetSettingsRequest, SetSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetBrandingSettings retrieves just the branding part of the settings
     *
     * @generated from protobuf rpc: GetBrandingSettings(pomerium.dashboard.GetSettingsRequest) returns (pomerium.dashboard.GetSettingsResponse);
     */
    getBrandingSettings(input: GetSettingsRequest, options?: RpcOptions): UnaryCall<GetSettingsRequest, GetSettingsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSettingsRequest, GetSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetConsoleSettings retrieves the console settings.
     *
     * @generated from protobuf rpc: GetConsoleSettings(pomerium.dashboard.GetConsoleSettingsRequest) returns (pomerium.dashboard.GetConsoleSettingsResponse);
     */
    getConsoleSettings(input: GetConsoleSettingsRequest, options?: RpcOptions): UnaryCall<GetConsoleSettingsRequest, GetConsoleSettingsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetConsoleSettingsRequest, GetConsoleSettingsResponse>("unary", this._transport, method, opt, input);
    }
}
