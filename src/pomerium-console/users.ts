// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "users.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ListValue } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * RecoveryToken is a recovery account for logging into the console without a
 * functioning Pomerium proxy
 *
 * @generated from protobuf message pomerium.dashboard.RecoveryToken
 */
export interface RecoveryToken {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string namespace = 2;
     */
    namespace: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 4;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expires_at = 5;
     */
    expiresAt?: Timestamp;
    /**
     * @generated from protobuf field: string public_key = 6;
     */
    publicKey: string;
}
/**
 * GroupInfo defines a directory group in the databroker
 *
 * @generated from protobuf message pomerium.dashboard.GroupInfo
 */
export interface GroupInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * UserInfo defines the metadata for a directory user in the databroker
 *
 * @generated from protobuf message pomerium.dashboard.UserInfo
 */
export interface UserInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: repeated string groups = 4;
     */
    groups: string[];
    /**
     * @generated from protobuf field: map<string, string> namespace_roles = 5;
     */
    namespaceRoles: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: string picture_url = 6;
     */
    pictureUrl: string;
    /**
     * @generated from protobuf field: bool is_impersonated = 7;
     */
    isImpersonated: boolean;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetUserInfoRequest
 */
export interface GetUserInfoRequest {
    /**
     * @generated from protobuf field: optional string user_id = 1;
     */
    userId?: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetUserInfoResponse
 */
export interface GetUserInfoResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.UserInfo user_info = 1;
     */
    userInfo?: UserInfo;
}
/**
 * QueryGroupsRequest defines the groups to retrieve
 *
 * @generated from protobuf message pomerium.dashboard.QueryGroupsRequest
 */
export interface QueryGroupsRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: int64 offset = 2;
     */
    offset: bigint;
    /**
     * @generated from protobuf field: int64 limit = 3;
     */
    limit: bigint;
}
/**
 * QueryGroupsResponse is the list of groups retrieved from a QueryGroupsRequest
 *
 * @generated from protobuf message pomerium.dashboard.QueryGroupsResponse
 */
export interface QueryGroupsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.GroupInfo groups = 1;
     */
    groups: GroupInfo[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
}
/**
 * QueryUsersRequest defines the users to retrieve
 *
 * @generated from protobuf message pomerium.dashboard.QueryUsersRequest
 */
export interface QueryUsersRequest {
    /**
     * list Users with any fields that match the query
     *
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * list Users starting from an offset in the total list
     *
     * @generated from protobuf field: int64 offset = 2;
     */
    offset: bigint;
    /**
     * limit the number of User entries returned
     *
     * @generated from protobuf field: int64 limit = 3;
     */
    limit: bigint;
}
/**
 * QueryUsersResponse is the list of users retrieved from a QueryUsersRequest
 *
 * @generated from protobuf message pomerium.dashboard.QueryUsersResponse
 */
export interface QueryUsersResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.UserInfo users = 1;
     */
    users: UserInfo[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
}
/**
 * PomeriumServiceAccount defines the identity properties of a service account
 *
 * @generated from protobuf message pomerium.dashboard.PomeriumServiceAccount
 */
export interface PomeriumServiceAccount {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional string namespace_id = 8;
     */
    namespaceId?: string;
    /**
     * @generated from protobuf field: optional string description = 9;
     */
    description?: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp accessed_at = 10;
     */
    accessedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expires_at = 3;
     */
    expiresAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp issued_at = 4;
     */
    issuedAt?: Timestamp;
}
/**
 * @generated from protobuf message pomerium.dashboard.AddPomeriumServiceAccountRequest
 */
export interface AddPomeriumServiceAccountRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumServiceAccount service_account = 1;
     */
    serviceAccount?: PomeriumServiceAccount;
}
/**
 * @generated from protobuf message pomerium.dashboard.AddPomeriumServiceAccountResponse
 */
export interface AddPomeriumServiceAccountResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumServiceAccount service_account = 1;
     */
    serviceAccount?: PomeriumServiceAccount;
    /**
     * @generated from protobuf field: string JWT = 2 [json_name = "JWT"];
     */
    jWT: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePomeriumServiceAccountRequest
 */
export interface DeletePomeriumServiceAccountRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePomeriumServiceAccountResponse
 */
export interface DeletePomeriumServiceAccountResponse {
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPomeriumServiceAccountRequest
 */
export interface GetPomeriumServiceAccountRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPomeriumServiceAccountResponse
 */
export interface GetPomeriumServiceAccountResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumServiceAccount service_account = 1;
     */
    serviceAccount?: PomeriumServiceAccount;
}
/**
 * ListPomeriumServiceAccountsRequest specifies the service accounts to list
 *
 * @generated from protobuf message pomerium.dashboard.ListPomeriumServiceAccountsRequest
 */
export interface ListPomeriumServiceAccountsRequest {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
}
/**
 * ListPomeriumServiceAccountsResponse is the list of service accounts found for
 * a ListPomeriumServiceAccountsRequest
 *
 * @generated from protobuf message pomerium.dashboard.ListPomeriumServiceAccountsResponse
 */
export interface ListPomeriumServiceAccountsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.PomeriumServiceAccount service_accounts = 1;
     */
    serviceAccounts: PomeriumServiceAccount[];
}
/**
 * @generated from protobuf message pomerium.dashboard.SetPomeriumServiceAccountRequest
 */
export interface SetPomeriumServiceAccountRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumServiceAccount service_account = 1;
     */
    serviceAccount?: PomeriumServiceAccount;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetPomeriumServiceAccountResponse
 */
export interface SetPomeriumServiceAccountResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumServiceAccount service_account = 1;
     */
    serviceAccount?: PomeriumServiceAccount;
}
/**
 * PomeriumSession defines a user session from the databroker
 *
 * @generated from protobuf message pomerium.dashboard.PomeriumSession
 */
export interface PomeriumSession {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumSession.User user = 2;
     */
    user?: PomeriumSession_User;
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.PomeriumSession.Group groups = 3;
     */
    groups: PomeriumSession_Group[];
    /**
     * @generated from protobuf field: string issuer = 4;
     */
    issuer: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp accessed_at = 9;
     */
    accessedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp issued_at = 5;
     */
    issuedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expires_at = 6;
     */
    expiresAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated string audience = 7;
     */
    audience: string[];
    /**
     * @generated from protobuf field: map<string, google.protobuf.ListValue> claims = 8;
     */
    claims: {
        [key: string]: ListValue;
    };
}
/**
 * @generated from protobuf message pomerium.dashboard.PomeriumSession.Group
 */
export interface PomeriumSession_Group {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.PomeriumSession.User
 */
export interface PomeriumSession_User {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePomeriumSessionRequest
 */
export interface DeletePomeriumSessionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePomeriumSessionResponse
 */
export interface DeletePomeriumSessionResponse {
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPomeriumSessionRequest
 */
export interface GetPomeriumSessionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPomeriumSessionResponse
 */
export interface GetPomeriumSessionResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.PomeriumSession session = 1;
     */
    session?: PomeriumSession;
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.PomeriumSession associated_sessions = 2;
     */
    associatedSessions: PomeriumSession[];
}
/**
 * ListPomeriumSessionsRequest specifies the sessions to list
 *
 * @generated from protobuf message pomerium.dashboard.ListPomeriumSessionsRequest
 */
export interface ListPomeriumSessionsRequest {
    /**
     * list Sessions with any fields that contain the query string
     *
     * @generated from protobuf field: optional string query = 1;
     */
    query?: string;
    /**
     * list Sessions starting from an offset in the total list
     *
     * @generated from protobuf field: optional int64 offset = 2;
     */
    offset?: bigint;
    /**
     * limit the number of Session entries returned
     *
     * @generated from protobuf field: optional int64 limit = 3;
     */
    limit?: bigint;
    /**
     * sort the Sessions by newest, oldest or name
     *
     * @generated from protobuf field: optional string order_by = 4;
     */
    orderBy?: string;
    /**
     * @generated from protobuf field: optional string user_id = 5;
     */
    userId?: string;
}
/**
 * ListPomeriumSessionsResponse is the sessions found for a
 * ListPomeriumSessionsRequest
 *
 * @generated from protobuf message pomerium.dashboard.ListPomeriumSessionsResponse
 */
export interface ListPomeriumSessionsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.PomeriumSession sessions = 1;
     */
    sessions: PomeriumSession[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
}
/**
 * ImpersonateRequest defines the identity information to impersonate
 *
 * @generated from protobuf message pomerium.dashboard.ImpersonateRequest
 */
export interface ImpersonateRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ImpersonateResponse
 */
export interface ImpersonateResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class RecoveryToken$Type extends MessageType<RecoveryToken> {
    constructor() {
        super("pomerium.dashboard.RecoveryToken", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "expires_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "public_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecoveryToken>): RecoveryToken {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.namespace = "";
        message.publicKey = "";
        if (value !== undefined)
            reflectionMergePartial<RecoveryToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecoveryToken): RecoveryToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string namespace */ 2:
                    message.namespace = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 4:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp expires_at */ 5:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                case /* string public_key */ 6:
                    message.publicKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecoveryToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string namespace = 2; */
        if (message.namespace !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.namespace);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 4; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expires_at = 5; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string public_key = 6; */
        if (message.publicKey !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.RecoveryToken
 */
export const RecoveryToken = new RecoveryToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupInfo$Type extends MessageType<GroupInfo> {
    constructor() {
        super("pomerium.dashboard.GroupInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupInfo>): GroupInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<GroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupInfo): GroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GroupInfo
 */
export const GroupInfo = new GroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType<UserInfo> {
    constructor() {
        super("pomerium.dashboard.UserInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "namespace_roles", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 6, name: "picture_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_impersonated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfo>): UserInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.email = "";
        message.groups = [];
        message.namespaceRoles = {};
        message.pictureUrl = "";
        message.isImpersonated = false;
        if (value !== undefined)
            reflectionMergePartial<UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfo): UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* repeated string groups */ 4:
                    message.groups.push(reader.string());
                    break;
                case /* map<string, string> namespace_roles */ 5:
                    this.binaryReadMap5(message.namespaceRoles, reader, options);
                    break;
                case /* string picture_url */ 6:
                    message.pictureUrl = reader.string();
                    break;
                case /* bool is_impersonated */ 7:
                    message.isImpersonated = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: UserInfo["namespaceRoles"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UserInfo["namespaceRoles"] | undefined, val: UserInfo["namespaceRoles"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field pomerium.dashboard.UserInfo.namespace_roles");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* repeated string groups = 4; */
        for (let i = 0; i < message.groups.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.groups[i]);
        /* map<string, string> namespace_roles = 5; */
        for (let k of globalThis.Object.keys(message.namespaceRoles))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.namespaceRoles[k]).join();
        /* string picture_url = 6; */
        if (message.pictureUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.pictureUrl);
        /* bool is_impersonated = 7; */
        if (message.isImpersonated !== false)
            writer.tag(7, WireType.Varint).bool(message.isImpersonated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserInfoRequest$Type extends MessageType<GetUserInfoRequest> {
    constructor() {
        super("pomerium.dashboard.GetUserInfoRequest", [
            { no: 1, name: "user_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserInfoRequest>): GetUserInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserInfoRequest): GetUserInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string user_id = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetUserInfoRequest
 */
export const GetUserInfoRequest = new GetUserInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserInfoResponse$Type extends MessageType<GetUserInfoResponse> {
    constructor() {
        super("pomerium.dashboard.GetUserInfoResponse", [
            { no: 1, name: "user_info", kind: "message", T: () => UserInfo }
        ]);
    }
    create(value?: PartialMessage<GetUserInfoResponse>): GetUserInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserInfoResponse): GetUserInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.UserInfo user_info */ 1:
                    message.userInfo = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.UserInfo user_info = 1; */
        if (message.userInfo)
            UserInfo.internalBinaryWrite(message.userInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetUserInfoResponse
 */
export const GetUserInfoResponse = new GetUserInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsRequest$Type extends MessageType<QueryGroupsRequest> {
    constructor() {
        super("pomerium.dashboard.QueryGroupsRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsRequest>): QueryGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        message.offset = 0n;
        message.limit = 0n;
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsRequest): QueryGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* int64 limit */ 3:
                    message.limit = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* int64 offset = 2; */
        if (message.offset !== 0n)
            writer.tag(2, WireType.Varint).int64(message.offset);
        /* int64 limit = 3; */
        if (message.limit !== 0n)
            writer.tag(3, WireType.Varint).int64(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.QueryGroupsRequest
 */
export const QueryGroupsRequest = new QueryGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsResponse$Type extends MessageType<QueryGroupsResponse> {
    constructor() {
        super("pomerium.dashboard.QueryGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupInfo },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsResponse>): QueryGroupsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        message.totalCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsResponse): QueryGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.GroupInfo groups */ 1:
                    message.groups.push(GroupInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.GroupInfo groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            GroupInfo.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.QueryGroupsResponse
 */
export const QueryGroupsResponse = new QueryGroupsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUsersRequest$Type extends MessageType<QueryUsersRequest> {
    constructor() {
        super("pomerium.dashboard.QueryUsersRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryUsersRequest>): QueryUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        message.offset = 0n;
        message.limit = 0n;
        if (value !== undefined)
            reflectionMergePartial<QueryUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUsersRequest): QueryUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* int64 limit */ 3:
                    message.limit = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* int64 offset = 2; */
        if (message.offset !== 0n)
            writer.tag(2, WireType.Varint).int64(message.offset);
        /* int64 limit = 3; */
        if (message.limit !== 0n)
            writer.tag(3, WireType.Varint).int64(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.QueryUsersRequest
 */
export const QueryUsersRequest = new QueryUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUsersResponse$Type extends MessageType<QueryUsersResponse> {
    constructor() {
        super("pomerium.dashboard.QueryUsersResponse", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserInfo },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryUsersResponse>): QueryUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        message.totalCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<QueryUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryUsersResponse): QueryUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.UserInfo users */ 1:
                    message.users.push(UserInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.UserInfo users = 1; */
        for (let i = 0; i < message.users.length; i++)
            UserInfo.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.QueryUsersResponse
 */
export const QueryUsersResponse = new QueryUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PomeriumServiceAccount$Type extends MessageType<PomeriumServiceAccount> {
    constructor() {
        super("pomerium.dashboard.PomeriumServiceAccount", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "namespace_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "accessed_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "expires_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "issued_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<PomeriumServiceAccount>): PomeriumServiceAccount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<PomeriumServiceAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PomeriumServiceAccount): PomeriumServiceAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional string namespace_id */ 8:
                    message.namespaceId = reader.string();
                    break;
                case /* optional string description */ 9:
                    message.description = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* google.protobuf.Timestamp accessed_at */ 10:
                    message.accessedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.accessedAt);
                    break;
                case /* google.protobuf.Timestamp expires_at */ 3:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                case /* google.protobuf.Timestamp issued_at */ 4:
                    message.issuedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.issuedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PomeriumServiceAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string namespace_id = 8; */
        if (message.namespaceId !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.namespaceId);
        /* optional string description = 9; */
        if (message.description !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.description);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* google.protobuf.Timestamp accessed_at = 10; */
        if (message.accessedAt)
            Timestamp.internalBinaryWrite(message.accessedAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expires_at = 3; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp issued_at = 4; */
        if (message.issuedAt)
            Timestamp.internalBinaryWrite(message.issuedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.PomeriumServiceAccount
 */
export const PomeriumServiceAccount = new PomeriumServiceAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPomeriumServiceAccountRequest$Type extends MessageType<AddPomeriumServiceAccountRequest> {
    constructor() {
        super("pomerium.dashboard.AddPomeriumServiceAccountRequest", [
            { no: 1, name: "service_account", kind: "message", T: () => PomeriumServiceAccount }
        ]);
    }
    create(value?: PartialMessage<AddPomeriumServiceAccountRequest>): AddPomeriumServiceAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddPomeriumServiceAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPomeriumServiceAccountRequest): AddPomeriumServiceAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumServiceAccount service_account */ 1:
                    message.serviceAccount = PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options, message.serviceAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPomeriumServiceAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumServiceAccount service_account = 1; */
        if (message.serviceAccount)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.AddPomeriumServiceAccountRequest
 */
export const AddPomeriumServiceAccountRequest = new AddPomeriumServiceAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPomeriumServiceAccountResponse$Type extends MessageType<AddPomeriumServiceAccountResponse> {
    constructor() {
        super("pomerium.dashboard.AddPomeriumServiceAccountResponse", [
            { no: 1, name: "service_account", kind: "message", T: () => PomeriumServiceAccount },
            { no: 2, name: "JWT", kind: "scalar", jsonName: "JWT", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddPomeriumServiceAccountResponse>): AddPomeriumServiceAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jWT = "";
        if (value !== undefined)
            reflectionMergePartial<AddPomeriumServiceAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPomeriumServiceAccountResponse): AddPomeriumServiceAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumServiceAccount service_account */ 1:
                    message.serviceAccount = PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options, message.serviceAccount);
                    break;
                case /* string JWT = 2 [json_name = "JWT"];*/ 2:
                    message.jWT = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPomeriumServiceAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumServiceAccount service_account = 1; */
        if (message.serviceAccount)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string JWT = 2 [json_name = "JWT"]; */
        if (message.jWT !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.jWT);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.AddPomeriumServiceAccountResponse
 */
export const AddPomeriumServiceAccountResponse = new AddPomeriumServiceAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePomeriumServiceAccountRequest$Type extends MessageType<DeletePomeriumServiceAccountRequest> {
    constructor() {
        super("pomerium.dashboard.DeletePomeriumServiceAccountRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePomeriumServiceAccountRequest>): DeletePomeriumServiceAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePomeriumServiceAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePomeriumServiceAccountRequest): DeletePomeriumServiceAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePomeriumServiceAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePomeriumServiceAccountRequest
 */
export const DeletePomeriumServiceAccountRequest = new DeletePomeriumServiceAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePomeriumServiceAccountResponse$Type extends MessageType<DeletePomeriumServiceAccountResponse> {
    constructor() {
        super("pomerium.dashboard.DeletePomeriumServiceAccountResponse", []);
    }
    create(value?: PartialMessage<DeletePomeriumServiceAccountResponse>): DeletePomeriumServiceAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeletePomeriumServiceAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePomeriumServiceAccountResponse): DeletePomeriumServiceAccountResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePomeriumServiceAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePomeriumServiceAccountResponse
 */
export const DeletePomeriumServiceAccountResponse = new DeletePomeriumServiceAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPomeriumServiceAccountRequest$Type extends MessageType<GetPomeriumServiceAccountRequest> {
    constructor() {
        super("pomerium.dashboard.GetPomeriumServiceAccountRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPomeriumServiceAccountRequest>): GetPomeriumServiceAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPomeriumServiceAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPomeriumServiceAccountRequest): GetPomeriumServiceAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPomeriumServiceAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPomeriumServiceAccountRequest
 */
export const GetPomeriumServiceAccountRequest = new GetPomeriumServiceAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPomeriumServiceAccountResponse$Type extends MessageType<GetPomeriumServiceAccountResponse> {
    constructor() {
        super("pomerium.dashboard.GetPomeriumServiceAccountResponse", [
            { no: 1, name: "service_account", kind: "message", T: () => PomeriumServiceAccount }
        ]);
    }
    create(value?: PartialMessage<GetPomeriumServiceAccountResponse>): GetPomeriumServiceAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPomeriumServiceAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPomeriumServiceAccountResponse): GetPomeriumServiceAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumServiceAccount service_account */ 1:
                    message.serviceAccount = PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options, message.serviceAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPomeriumServiceAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumServiceAccount service_account = 1; */
        if (message.serviceAccount)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPomeriumServiceAccountResponse
 */
export const GetPomeriumServiceAccountResponse = new GetPomeriumServiceAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPomeriumServiceAccountsRequest$Type extends MessageType<ListPomeriumServiceAccountsRequest> {
    constructor() {
        super("pomerium.dashboard.ListPomeriumServiceAccountsRequest", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPomeriumServiceAccountsRequest>): ListPomeriumServiceAccountsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespace = "";
        if (value !== undefined)
            reflectionMergePartial<ListPomeriumServiceAccountsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPomeriumServiceAccountsRequest): ListPomeriumServiceAccountsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPomeriumServiceAccountsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPomeriumServiceAccountsRequest
 */
export const ListPomeriumServiceAccountsRequest = new ListPomeriumServiceAccountsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPomeriumServiceAccountsResponse$Type extends MessageType<ListPomeriumServiceAccountsResponse> {
    constructor() {
        super("pomerium.dashboard.ListPomeriumServiceAccountsResponse", [
            { no: 1, name: "service_accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PomeriumServiceAccount }
        ]);
    }
    create(value?: PartialMessage<ListPomeriumServiceAccountsResponse>): ListPomeriumServiceAccountsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serviceAccounts = [];
        if (value !== undefined)
            reflectionMergePartial<ListPomeriumServiceAccountsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPomeriumServiceAccountsResponse): ListPomeriumServiceAccountsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.PomeriumServiceAccount service_accounts */ 1:
                    message.serviceAccounts.push(PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPomeriumServiceAccountsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.PomeriumServiceAccount service_accounts = 1; */
        for (let i = 0; i < message.serviceAccounts.length; i++)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPomeriumServiceAccountsResponse
 */
export const ListPomeriumServiceAccountsResponse = new ListPomeriumServiceAccountsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPomeriumServiceAccountRequest$Type extends MessageType<SetPomeriumServiceAccountRequest> {
    constructor() {
        super("pomerium.dashboard.SetPomeriumServiceAccountRequest", [
            { no: 1, name: "service_account", kind: "message", T: () => PomeriumServiceAccount }
        ]);
    }
    create(value?: PartialMessage<SetPomeriumServiceAccountRequest>): SetPomeriumServiceAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPomeriumServiceAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPomeriumServiceAccountRequest): SetPomeriumServiceAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumServiceAccount service_account */ 1:
                    message.serviceAccount = PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options, message.serviceAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPomeriumServiceAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumServiceAccount service_account = 1; */
        if (message.serviceAccount)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetPomeriumServiceAccountRequest
 */
export const SetPomeriumServiceAccountRequest = new SetPomeriumServiceAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPomeriumServiceAccountResponse$Type extends MessageType<SetPomeriumServiceAccountResponse> {
    constructor() {
        super("pomerium.dashboard.SetPomeriumServiceAccountResponse", [
            { no: 1, name: "service_account", kind: "message", T: () => PomeriumServiceAccount }
        ]);
    }
    create(value?: PartialMessage<SetPomeriumServiceAccountResponse>): SetPomeriumServiceAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPomeriumServiceAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPomeriumServiceAccountResponse): SetPomeriumServiceAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumServiceAccount service_account */ 1:
                    message.serviceAccount = PomeriumServiceAccount.internalBinaryRead(reader, reader.uint32(), options, message.serviceAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPomeriumServiceAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumServiceAccount service_account = 1; */
        if (message.serviceAccount)
            PomeriumServiceAccount.internalBinaryWrite(message.serviceAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetPomeriumServiceAccountResponse
 */
export const SetPomeriumServiceAccountResponse = new SetPomeriumServiceAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PomeriumSession$Type extends MessageType<PomeriumSession> {
    constructor() {
        super("pomerium.dashboard.PomeriumSession", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "message", T: () => PomeriumSession_User },
            { no: 3, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PomeriumSession_Group },
            { no: 4, name: "issuer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "accessed_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "issued_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "expires_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "audience", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "claims", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ListValue } }
        ]);
    }
    create(value?: PartialMessage<PomeriumSession>): PomeriumSession {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.groups = [];
        message.issuer = "";
        message.audience = [];
        message.claims = {};
        if (value !== undefined)
            reflectionMergePartial<PomeriumSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PomeriumSession): PomeriumSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* pomerium.dashboard.PomeriumSession.User user */ 2:
                    message.user = PomeriumSession_User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* repeated pomerium.dashboard.PomeriumSession.Group groups */ 3:
                    message.groups.push(PomeriumSession_Group.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string issuer */ 4:
                    message.issuer = reader.string();
                    break;
                case /* google.protobuf.Timestamp accessed_at */ 9:
                    message.accessedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.accessedAt);
                    break;
                case /* google.protobuf.Timestamp issued_at */ 5:
                    message.issuedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.issuedAt);
                    break;
                case /* google.protobuf.Timestamp expires_at */ 6:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                case /* repeated string audience */ 7:
                    message.audience.push(reader.string());
                    break;
                case /* map<string, google.protobuf.ListValue> claims */ 8:
                    this.binaryReadMap8(message.claims, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: PomeriumSession["claims"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PomeriumSession["claims"] | undefined, val: PomeriumSession["claims"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ListValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field pomerium.dashboard.PomeriumSession.claims");
            }
        }
        map[key ?? ""] = val ?? ListValue.create();
    }
    internalBinaryWrite(message: PomeriumSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* pomerium.dashboard.PomeriumSession.User user = 2; */
        if (message.user)
            PomeriumSession_User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.PomeriumSession.Group groups = 3; */
        for (let i = 0; i < message.groups.length; i++)
            PomeriumSession_Group.internalBinaryWrite(message.groups[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string issuer = 4; */
        if (message.issuer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.issuer);
        /* google.protobuf.Timestamp accessed_at = 9; */
        if (message.accessedAt)
            Timestamp.internalBinaryWrite(message.accessedAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp issued_at = 5; */
        if (message.issuedAt)
            Timestamp.internalBinaryWrite(message.issuedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expires_at = 6; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated string audience = 7; */
        for (let i = 0; i < message.audience.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.audience[i]);
        /* map<string, google.protobuf.ListValue> claims = 8; */
        for (let k of globalThis.Object.keys(message.claims)) {
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ListValue.internalBinaryWrite(message.claims[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.PomeriumSession
 */
export const PomeriumSession = new PomeriumSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PomeriumSession_Group$Type extends MessageType<PomeriumSession_Group> {
    constructor() {
        super("pomerium.dashboard.PomeriumSession.Group", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PomeriumSession_Group>): PomeriumSession_Group {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<PomeriumSession_Group>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PomeriumSession_Group): PomeriumSession_Group {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PomeriumSession_Group, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.PomeriumSession.Group
 */
export const PomeriumSession_Group = new PomeriumSession_Group$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PomeriumSession_User$Type extends MessageType<PomeriumSession_User> {
    constructor() {
        super("pomerium.dashboard.PomeriumSession.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PomeriumSession_User>): PomeriumSession_User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<PomeriumSession_User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PomeriumSession_User): PomeriumSession_User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PomeriumSession_User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.PomeriumSession.User
 */
export const PomeriumSession_User = new PomeriumSession_User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePomeriumSessionRequest$Type extends MessageType<DeletePomeriumSessionRequest> {
    constructor() {
        super("pomerium.dashboard.DeletePomeriumSessionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePomeriumSessionRequest>): DeletePomeriumSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePomeriumSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePomeriumSessionRequest): DeletePomeriumSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePomeriumSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePomeriumSessionRequest
 */
export const DeletePomeriumSessionRequest = new DeletePomeriumSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePomeriumSessionResponse$Type extends MessageType<DeletePomeriumSessionResponse> {
    constructor() {
        super("pomerium.dashboard.DeletePomeriumSessionResponse", []);
    }
    create(value?: PartialMessage<DeletePomeriumSessionResponse>): DeletePomeriumSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeletePomeriumSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePomeriumSessionResponse): DeletePomeriumSessionResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePomeriumSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePomeriumSessionResponse
 */
export const DeletePomeriumSessionResponse = new DeletePomeriumSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPomeriumSessionRequest$Type extends MessageType<GetPomeriumSessionRequest> {
    constructor() {
        super("pomerium.dashboard.GetPomeriumSessionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPomeriumSessionRequest>): GetPomeriumSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPomeriumSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPomeriumSessionRequest): GetPomeriumSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPomeriumSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPomeriumSessionRequest
 */
export const GetPomeriumSessionRequest = new GetPomeriumSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPomeriumSessionResponse$Type extends MessageType<GetPomeriumSessionResponse> {
    constructor() {
        super("pomerium.dashboard.GetPomeriumSessionResponse", [
            { no: 1, name: "session", kind: "message", T: () => PomeriumSession },
            { no: 2, name: "associated_sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PomeriumSession }
        ]);
    }
    create(value?: PartialMessage<GetPomeriumSessionResponse>): GetPomeriumSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.associatedSessions = [];
        if (value !== undefined)
            reflectionMergePartial<GetPomeriumSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPomeriumSessionResponse): GetPomeriumSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.PomeriumSession session */ 1:
                    message.session = PomeriumSession.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                case /* repeated pomerium.dashboard.PomeriumSession associated_sessions */ 2:
                    message.associatedSessions.push(PomeriumSession.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPomeriumSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.PomeriumSession session = 1; */
        if (message.session)
            PomeriumSession.internalBinaryWrite(message.session, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.PomeriumSession associated_sessions = 2; */
        for (let i = 0; i < message.associatedSessions.length; i++)
            PomeriumSession.internalBinaryWrite(message.associatedSessions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPomeriumSessionResponse
 */
export const GetPomeriumSessionResponse = new GetPomeriumSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPomeriumSessionsRequest$Type extends MessageType<ListPomeriumSessionsRequest> {
    constructor() {
        super("pomerium.dashboard.ListPomeriumSessionsRequest", [
            { no: 1, name: "query", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "offset", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "order_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "user_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPomeriumSessionsRequest>): ListPomeriumSessionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListPomeriumSessionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPomeriumSessionsRequest): ListPomeriumSessionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string query */ 1:
                    message.query = reader.string();
                    break;
                case /* optional int64 offset */ 2:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* optional int64 limit */ 3:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* optional string order_by */ 4:
                    message.orderBy = reader.string();
                    break;
                case /* optional string user_id */ 5:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPomeriumSessionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string query = 1; */
        if (message.query !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* optional int64 offset = 2; */
        if (message.offset !== undefined)
            writer.tag(2, WireType.Varint).int64(message.offset);
        /* optional int64 limit = 3; */
        if (message.limit !== undefined)
            writer.tag(3, WireType.Varint).int64(message.limit);
        /* optional string order_by = 4; */
        if (message.orderBy !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.orderBy);
        /* optional string user_id = 5; */
        if (message.userId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPomeriumSessionsRequest
 */
export const ListPomeriumSessionsRequest = new ListPomeriumSessionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPomeriumSessionsResponse$Type extends MessageType<ListPomeriumSessionsResponse> {
    constructor() {
        super("pomerium.dashboard.ListPomeriumSessionsResponse", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PomeriumSession },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListPomeriumSessionsResponse>): ListPomeriumSessionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessions = [];
        message.totalCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListPomeriumSessionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPomeriumSessionsResponse): ListPomeriumSessionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.PomeriumSession sessions */ 1:
                    message.sessions.push(PomeriumSession.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPomeriumSessionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.PomeriumSession sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            PomeriumSession.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPomeriumSessionsResponse
 */
export const ListPomeriumSessionsResponse = new ListPomeriumSessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImpersonateRequest$Type extends MessageType<ImpersonateRequest> {
    constructor() {
        super("pomerium.dashboard.ImpersonateRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImpersonateRequest>): ImpersonateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<ImpersonateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImpersonateRequest): ImpersonateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImpersonateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ImpersonateRequest
 */
export const ImpersonateRequest = new ImpersonateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImpersonateResponse$Type extends MessageType<ImpersonateResponse> {
    constructor() {
        super("pomerium.dashboard.ImpersonateResponse", []);
    }
    create(value?: PartialMessage<ImpersonateResponse>): ImpersonateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ImpersonateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImpersonateResponse): ImpersonateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ImpersonateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ImpersonateResponse
 */
export const ImpersonateResponse = new ImpersonateResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.UserService
 */
export const UserService = new ServiceType("pomerium.dashboard.UserService", [
    { name: "GetUserInfo", options: {}, I: GetUserInfoRequest, O: GetUserInfoResponse },
    { name: "QueryGroups", options: {}, I: QueryGroupsRequest, O: QueryGroupsResponse },
    { name: "QueryUsers", options: {}, I: QueryUsersRequest, O: QueryUsersResponse }
]);
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.PomeriumServiceAccountService
 */
export const PomeriumServiceAccountService = new ServiceType("pomerium.dashboard.PomeriumServiceAccountService", [
    { name: "AddPomeriumServiceAccount", options: {}, I: AddPomeriumServiceAccountRequest, O: AddPomeriumServiceAccountResponse },
    { name: "DeletePomeriumServiceAccount", options: {}, I: DeletePomeriumServiceAccountRequest, O: DeletePomeriumServiceAccountResponse },
    { name: "GetPomeriumServiceAccount", options: {}, I: GetPomeriumServiceAccountRequest, O: GetPomeriumServiceAccountResponse },
    { name: "ListPomeriumServiceAccounts", options: {}, I: ListPomeriumServiceAccountsRequest, O: ListPomeriumServiceAccountsResponse },
    { name: "SetPomeriumServiceAccount", options: {}, I: SetPomeriumServiceAccountRequest, O: SetPomeriumServiceAccountResponse }
]);
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.PomeriumSessionService
 */
export const PomeriumSessionService = new ServiceType("pomerium.dashboard.PomeriumSessionService", [
    { name: "DeletePomeriumSession", options: {}, I: DeletePomeriumSessionRequest, O: DeletePomeriumSessionResponse },
    { name: "GetPomeriumSession", options: {}, I: GetPomeriumSessionRequest, O: GetPomeriumSessionResponse },
    { name: "Impersonate", options: {}, I: ImpersonateRequest, O: ImpersonateResponse },
    { name: "ListPomeriumSessions", options: {}, I: ListPomeriumSessionsRequest, O: ListPomeriumSessionsResponse }
]);
