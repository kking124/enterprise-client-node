// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "xds/core/v3/resource_locator.proto" (package "xds.core.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ContextParams } from "./context_params";
/**
 * xDS resource locators identify a xDS resource name and instruct the
 * data-plane load balancer on how the resource may be located.
 *
 * Resource locators have a canonical xdstp:// URI representation:
 *
 *   xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}
 *
 * where context_params take the form of URI query parameters.
 *
 * Resource locators have a similar canonical http:// URI representation:
 *
 *   http://{authority}/{type_url}/{id}?{context_params}{#directive,*}
 *
 * Resource locators also have a simplified file:// URI representation:
 *
 *   file:///{id}{#directive,*}
 *
 *
 * @generated from protobuf message xds.core.v3.ResourceLocator
 */
export interface ResourceLocator {
    /**
     * URI scheme.
     *
     * @generated from protobuf field: xds.core.v3.ResourceLocator.Scheme scheme = 1;
     */
    scheme: ResourceLocator_Scheme;
    /**
     * Opaque identifier for the resource. Any '/' will not be escaped during URI
     * encoding and will form part of the URI path. This may end
     * with ‘*’ for glob collection references.
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * Logical authority for resource (not necessarily transport network address).
     * Authorities are opaque in the xDS API, data-plane load balancers will map
     * them to concrete network transports such as an xDS management server, e.g.
     * via envoy.config.core.v3.ConfigSource.
     *
     * @generated from protobuf field: string authority = 3;
     */
    authority: string;
    /**
     * Fully qualified resource type (as in type URL without types.googleapis.com/
     * prefix).
     *
     * @generated from protobuf field: string resource_type = 4;
     */
    resourceType: string;
    /**
     * @generated from protobuf oneof: context_param_specifier
     */
    contextParamSpecifier: {
        oneofKind: "exactContext";
        /**
         * Additional parameters that can be used to select resource variants.
         * Matches must be exact, i.e. all context parameters must match exactly and
         * there must be no additional context parameters set on the matched
         * resource.
         *
         * @generated from protobuf field: xds.core.v3.ContextParams exact_context = 5;
         */
        exactContext: ContextParams;
    } | {
        oneofKind: undefined;
    };
    /**
     * A list of directives that appear in the xDS resource locator #fragment.
     *
     * When encoding to URI form, directives are percent encoded with comma
     * separation.
     *
     * @generated from protobuf field: repeated xds.core.v3.ResourceLocator.Directive directives = 6;
     */
    directives: ResourceLocator_Directive[];
}
/**
 * Directives provide information to data-plane load balancers on how xDS
 * resource names are to be interpreted and potentially further resolved. For
 * example, they may provide alternative resource locators for when primary
 * resolution fails. Directives are not part of resource names and do not
 * appear in a xDS transport discovery request.
 *
 * When encoding to URIs, directives take the form:
 *
 * <directive name>=<string representation of directive value>
 *
 * For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each
 * directive value type may have its own string encoding, in the case of
 * ResourceLocator there is a recursive URI encoding.
 *
 * Percent encoding applies to the URI encoding of the directive value.
 * Multiple directives are comma-separated, so the reserved characters that
 * require percent encoding in a directive value are [',', '#', '[', ']',
 * '%']. These are the RFC3986 fragment reserved characters with the addition
 * of the xDS scheme specific ','. See
 * https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF
 * and reserved characters.
 *
 * @generated from protobuf message xds.core.v3.ResourceLocator.Directive
 */
export interface ResourceLocator_Directive {
    /**
     * @generated from protobuf oneof: directive
     */
    directive: {
        oneofKind: "alt";
        /**
         * An alternative resource locator for fallback if the resource is
         * unavailable. For example, take the resource locator:
         *
         *   xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table
         *
         * If the data-plane load balancer is unable to reach `foo` to fetch the
         * resource, it will fallback to `bar`. Alternative resources do not need
         * to have equivalent content, but they should be functional substitutes.
         *
         * @generated from protobuf field: xds.core.v3.ResourceLocator alt = 1;
         */
        alt: ResourceLocator;
    } | {
        oneofKind: "entry";
        /**
         * List collections support inlining of resources via the entry field in
         * Resource. These inlined Resource objects may have an optional name
         * field specified. When specified, the entry directive allows
         * ResourceLocator to directly reference these inlined resources, e.g.
         * xdstp://.../foo#entry=bar.
         *
         * @generated from protobuf field: string entry = 2;
         */
        entry: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum xds.core.v3.ResourceLocator.Scheme
 */
export enum ResourceLocator_Scheme {
    /**
     * @generated from protobuf enum value: XDSTP = 0;
     */
    XDSTP = 0,
    /**
     * @generated from protobuf enum value: HTTP = 1;
     */
    HTTP = 1,
    /**
     * @generated from protobuf enum value: FILE = 2;
     */
    FILE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ResourceLocator$Type extends MessageType<ResourceLocator> {
    constructor() {
        super("xds.core.v3.ResourceLocator", [
            { no: 1, name: "scheme", kind: "enum", T: () => ["xds.core.v3.ResourceLocator.Scheme", ResourceLocator_Scheme], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "authority", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "resource_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } },
            { no: 5, name: "exact_context", kind: "message", oneof: "contextParamSpecifier", T: () => ContextParams },
            { no: 6, name: "directives", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceLocator_Directive }
        ]);
    }
    create(value?: PartialMessage<ResourceLocator>): ResourceLocator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.scheme = 0;
        message.id = "";
        message.authority = "";
        message.resourceType = "";
        message.contextParamSpecifier = { oneofKind: undefined };
        message.directives = [];
        if (value !== undefined)
            reflectionMergePartial<ResourceLocator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceLocator): ResourceLocator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xds.core.v3.ResourceLocator.Scheme scheme */ 1:
                    message.scheme = reader.int32();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string authority */ 3:
                    message.authority = reader.string();
                    break;
                case /* string resource_type */ 4:
                    message.resourceType = reader.string();
                    break;
                case /* xds.core.v3.ContextParams exact_context */ 5:
                    message.contextParamSpecifier = {
                        oneofKind: "exactContext",
                        exactContext: ContextParams.internalBinaryRead(reader, reader.uint32(), options, (message.contextParamSpecifier as any).exactContext)
                    };
                    break;
                case /* repeated xds.core.v3.ResourceLocator.Directive directives */ 6:
                    message.directives.push(ResourceLocator_Directive.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceLocator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xds.core.v3.ResourceLocator.Scheme scheme = 1; */
        if (message.scheme !== 0)
            writer.tag(1, WireType.Varint).int32(message.scheme);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string authority = 3; */
        if (message.authority !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.authority);
        /* string resource_type = 4; */
        if (message.resourceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.resourceType);
        /* xds.core.v3.ContextParams exact_context = 5; */
        if (message.contextParamSpecifier.oneofKind === "exactContext")
            ContextParams.internalBinaryWrite(message.contextParamSpecifier.exactContext, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated xds.core.v3.ResourceLocator.Directive directives = 6; */
        for (let i = 0; i < message.directives.length; i++)
            ResourceLocator_Directive.internalBinaryWrite(message.directives[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.core.v3.ResourceLocator
 */
export const ResourceLocator = new ResourceLocator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceLocator_Directive$Type extends MessageType<ResourceLocator_Directive> {
    constructor() {
        super("xds.core.v3.ResourceLocator.Directive", [
            { no: 1, name: "alt", kind: "message", oneof: "directive", T: () => ResourceLocator },
            { no: 2, name: "entry", kind: "scalar", oneof: "directive", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", pattern: "^[0-9a-zA-Z_\\-\\./~:]+$" } } } }
        ]);
    }
    create(value?: PartialMessage<ResourceLocator_Directive>): ResourceLocator_Directive {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.directive = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ResourceLocator_Directive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceLocator_Directive): ResourceLocator_Directive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xds.core.v3.ResourceLocator alt */ 1:
                    message.directive = {
                        oneofKind: "alt",
                        alt: ResourceLocator.internalBinaryRead(reader, reader.uint32(), options, (message.directive as any).alt)
                    };
                    break;
                case /* string entry */ 2:
                    message.directive = {
                        oneofKind: "entry",
                        entry: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceLocator_Directive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xds.core.v3.ResourceLocator alt = 1; */
        if (message.directive.oneofKind === "alt")
            ResourceLocator.internalBinaryWrite(message.directive.alt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string entry = 2; */
        if (message.directive.oneofKind === "entry")
            writer.tag(2, WireType.LengthDelimited).string(message.directive.entry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.core.v3.ResourceLocator.Directive
 */
export const ResourceLocator_Directive = new ResourceLocator_Directive$Type();
