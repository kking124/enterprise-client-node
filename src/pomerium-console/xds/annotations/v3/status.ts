// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "xds/annotations/v3/status.proto" (package "xds.annotations.v3", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message xds.annotations.v3.FileStatusAnnotation
 */
export interface FileStatusAnnotation {
    /**
     * The entity is work-in-progress and subject to breaking changes.
     *
     * @generated from protobuf field: bool work_in_progress = 1;
     */
    workInProgress: boolean;
}
/**
 * @generated from protobuf message xds.annotations.v3.MessageStatusAnnotation
 */
export interface MessageStatusAnnotation {
    /**
     * The entity is work-in-progress and subject to breaking changes.
     *
     * @generated from protobuf field: bool work_in_progress = 1;
     */
    workInProgress: boolean;
}
/**
 * @generated from protobuf message xds.annotations.v3.FieldStatusAnnotation
 */
export interface FieldStatusAnnotation {
    /**
     * The entity is work-in-progress and subject to breaking changes.
     *
     * @generated from protobuf field: bool work_in_progress = 1;
     */
    workInProgress: boolean;
}
/**
 * @generated from protobuf message xds.annotations.v3.StatusAnnotation
 */
export interface StatusAnnotation {
    /**
     * The entity is work-in-progress and subject to breaking changes.
     *
     * @generated from protobuf field: bool work_in_progress = 1;
     */
    workInProgress: boolean;
    /**
     * The entity belongs to a package with the given version status.
     *
     * @generated from protobuf field: xds.annotations.v3.PackageVersionStatus package_version_status = 2;
     */
    packageVersionStatus: PackageVersionStatus;
}
/**
 * @generated from protobuf enum xds.annotations.v3.PackageVersionStatus
 */
export enum PackageVersionStatus {
    /**
     * Unknown package version status.
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * This version of the package is frozen.
     *
     * @generated from protobuf enum value: FROZEN = 1;
     */
    FROZEN = 1,
    /**
     * This version of the package is the active development version.
     *
     * @generated from protobuf enum value: ACTIVE = 2;
     */
    ACTIVE = 2,
    /**
     * This version of the package is the candidate for the next major version. It
     * is typically machine generated from the active development version.
     *
     * @generated from protobuf enum value: NEXT_MAJOR_VERSION_CANDIDATE = 3;
     */
    NEXT_MAJOR_VERSION_CANDIDATE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class FileStatusAnnotation$Type extends MessageType<FileStatusAnnotation> {
    constructor() {
        super("xds.annotations.v3.FileStatusAnnotation", [
            { no: 1, name: "work_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FileStatusAnnotation>): FileStatusAnnotation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workInProgress = false;
        if (value !== undefined)
            reflectionMergePartial<FileStatusAnnotation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileStatusAnnotation): FileStatusAnnotation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool work_in_progress */ 1:
                    message.workInProgress = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileStatusAnnotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool work_in_progress = 1; */
        if (message.workInProgress !== false)
            writer.tag(1, WireType.Varint).bool(message.workInProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.annotations.v3.FileStatusAnnotation
 */
export const FileStatusAnnotation = new FileStatusAnnotation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageStatusAnnotation$Type extends MessageType<MessageStatusAnnotation> {
    constructor() {
        super("xds.annotations.v3.MessageStatusAnnotation", [
            { no: 1, name: "work_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MessageStatusAnnotation>): MessageStatusAnnotation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workInProgress = false;
        if (value !== undefined)
            reflectionMergePartial<MessageStatusAnnotation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageStatusAnnotation): MessageStatusAnnotation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool work_in_progress */ 1:
                    message.workInProgress = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageStatusAnnotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool work_in_progress = 1; */
        if (message.workInProgress !== false)
            writer.tag(1, WireType.Varint).bool(message.workInProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.annotations.v3.MessageStatusAnnotation
 */
export const MessageStatusAnnotation = new MessageStatusAnnotation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldStatusAnnotation$Type extends MessageType<FieldStatusAnnotation> {
    constructor() {
        super("xds.annotations.v3.FieldStatusAnnotation", [
            { no: 1, name: "work_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FieldStatusAnnotation>): FieldStatusAnnotation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workInProgress = false;
        if (value !== undefined)
            reflectionMergePartial<FieldStatusAnnotation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldStatusAnnotation): FieldStatusAnnotation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool work_in_progress */ 1:
                    message.workInProgress = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldStatusAnnotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool work_in_progress = 1; */
        if (message.workInProgress !== false)
            writer.tag(1, WireType.Varint).bool(message.workInProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.annotations.v3.FieldStatusAnnotation
 */
export const FieldStatusAnnotation = new FieldStatusAnnotation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusAnnotation$Type extends MessageType<StatusAnnotation> {
    constructor() {
        super("xds.annotations.v3.StatusAnnotation", [
            { no: 1, name: "work_in_progress", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "package_version_status", kind: "enum", T: () => ["xds.annotations.v3.PackageVersionStatus", PackageVersionStatus] }
        ]);
    }
    create(value?: PartialMessage<StatusAnnotation>): StatusAnnotation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workInProgress = false;
        message.packageVersionStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<StatusAnnotation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusAnnotation): StatusAnnotation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool work_in_progress */ 1:
                    message.workInProgress = reader.bool();
                    break;
                case /* xds.annotations.v3.PackageVersionStatus package_version_status */ 2:
                    message.packageVersionStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusAnnotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool work_in_progress = 1; */
        if (message.workInProgress !== false)
            writer.tag(1, WireType.Varint).bool(message.workInProgress);
        /* xds.annotations.v3.PackageVersionStatus package_version_status = 2; */
        if (message.packageVersionStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.packageVersionStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xds.annotations.v3.StatusAnnotation
 */
export const StatusAnnotation = new StatusAnnotation$Type();
