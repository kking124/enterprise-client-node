// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "audit_svc.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Record } from "./audit/audit";
import { SealedMessage } from "./crypt/crypt";
/**
 * @generated from protobuf message pomerium.dashboard.DecryptAuditRecordsRequest
 */
export interface DecryptAuditRecordsRequest {
    /**
     * @generated from protobuf field: repeated pomerium.crypt.SealedMessage sealed_audit_records = 1;
     */
    sealedAuditRecords: SealedMessage[];
}
/**
 * @generated from protobuf message pomerium.dashboard.DecryptAuditRecordsResponse
 */
export interface DecryptAuditRecordsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.audit.Record audit_records = 1;
     */
    auditRecords: Record[];
}
// @generated message type with reflection information, may provide speed optimized methods
class DecryptAuditRecordsRequest$Type extends MessageType<DecryptAuditRecordsRequest> {
    constructor() {
        super("pomerium.dashboard.DecryptAuditRecordsRequest", [
            { no: 1, name: "sealed_audit_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SealedMessage }
        ]);
    }
    create(value?: PartialMessage<DecryptAuditRecordsRequest>): DecryptAuditRecordsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sealedAuditRecords = [];
        if (value !== undefined)
            reflectionMergePartial<DecryptAuditRecordsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecryptAuditRecordsRequest): DecryptAuditRecordsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.crypt.SealedMessage sealed_audit_records */ 1:
                    message.sealedAuditRecords.push(SealedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecryptAuditRecordsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.crypt.SealedMessage sealed_audit_records = 1; */
        for (let i = 0; i < message.sealedAuditRecords.length; i++)
            SealedMessage.internalBinaryWrite(message.sealedAuditRecords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DecryptAuditRecordsRequest
 */
export const DecryptAuditRecordsRequest = new DecryptAuditRecordsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecryptAuditRecordsResponse$Type extends MessageType<DecryptAuditRecordsResponse> {
    constructor() {
        super("pomerium.dashboard.DecryptAuditRecordsResponse", [
            { no: 1, name: "audit_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Record }
        ]);
    }
    create(value?: PartialMessage<DecryptAuditRecordsResponse>): DecryptAuditRecordsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.auditRecords = [];
        if (value !== undefined)
            reflectionMergePartial<DecryptAuditRecordsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecryptAuditRecordsResponse): DecryptAuditRecordsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.audit.Record audit_records */ 1:
                    message.auditRecords.push(Record.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecryptAuditRecordsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.audit.Record audit_records = 1; */
        for (let i = 0; i < message.auditRecords.length; i++)
            Record.internalBinaryWrite(message.auditRecords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DecryptAuditRecordsResponse
 */
export const DecryptAuditRecordsResponse = new DecryptAuditRecordsResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.AuditService
 */
export const AuditService = new ServiceType("pomerium.dashboard.AuditService", [
    { name: "DecryptAuditRecords", options: {}, I: DecryptAuditRecordsRequest, O: DecryptAuditRecordsResponse }
]);
