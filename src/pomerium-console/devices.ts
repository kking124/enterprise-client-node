// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "devices.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message pomerium.dashboard.WebAuthnOptions
 */
export interface WebAuthnOptions {
    /**
     * @generated from protobuf field: optional pomerium.dashboard.WebAuthnOptions.AttestationConveyancePreference attestation = 1;
     */
    attestation?: WebAuthnOptions_AttestationConveyancePreference;
    /**
     * @generated from protobuf field: optional pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria authenticator_selection = 2;
     */
    authenticatorSelection?: WebAuthnOptions_AuthenticatorSelectionCriteria;
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters pub_key_cred_params = 3;
     */
    pubKeyCredParams: WebAuthnOptions_PublicKeyCredentialParameters[];
}
/**
 * @generated from protobuf message pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria
 */
export interface WebAuthnOptions_AuthenticatorSelectionCriteria {
    /**
     * @generated from protobuf field: optional pomerium.dashboard.WebAuthnOptions.AuthenticatorAttachment authenticator_attachment = 1;
     */
    authenticatorAttachment?: WebAuthnOptions_AuthenticatorAttachment;
    /**
     * @generated from protobuf field: optional bool require_resident_key = 2;
     */
    requireResidentKey?: boolean;
    /**
     * @generated from protobuf field: optional pomerium.dashboard.WebAuthnOptions.ResidentKeyRequirement resident_key_requirement = 3;
     */
    residentKeyRequirement?: WebAuthnOptions_ResidentKeyRequirement;
    /**
     * @generated from protobuf field: optional pomerium.dashboard.WebAuthnOptions.UserVerificationRequirement user_verification = 4;
     */
    userVerification?: WebAuthnOptions_UserVerificationRequirement;
}
/**
 * @generated from protobuf message pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters
 */
export interface WebAuthnOptions_PublicKeyCredentialParameters {
    /**
     * @generated from protobuf field: int64 alg = 1;
     */
    alg: bigint;
    /**
     * @generated from protobuf field: pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialType type = 2;
     */
    type: WebAuthnOptions_PublicKeyCredentialType;
}
/**
 * @generated from protobuf enum pomerium.dashboard.WebAuthnOptions.AttestationConveyancePreference
 */
export enum WebAuthnOptions_AttestationConveyancePreference {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: INDIRECT = 1;
     */
    INDIRECT = 1,
    /**
     * @generated from protobuf enum value: DIRECT = 2;
     */
    DIRECT = 2,
    /**
     * @generated from protobuf enum value: ENTERPRISE = 3;
     */
    ENTERPRISE = 3
}
/**
 * @generated from protobuf enum pomerium.dashboard.WebAuthnOptions.AuthenticatorAttachment
 */
export enum WebAuthnOptions_AuthenticatorAttachment {
    /**
     * @generated from protobuf enum value: PLATFORM = 0;
     */
    PLATFORM = 0,
    /**
     * @generated from protobuf enum value: CROSS_PLATFORM = 2;
     */
    CROSS_PLATFORM = 2
}
/**
 * @generated from protobuf enum pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialType
 */
export enum WebAuthnOptions_PublicKeyCredentialType {
    /**
     * @generated from protobuf enum value: PUBLIC_KEY = 0;
     */
    PUBLIC_KEY = 0
}
/**
 * @generated from protobuf enum pomerium.dashboard.WebAuthnOptions.ResidentKeyRequirement
 */
export enum WebAuthnOptions_ResidentKeyRequirement {
    /**
     * @generated from protobuf enum value: RESIDENT_KEY_DISCOURAGED = 0;
     */
    RESIDENT_KEY_DISCOURAGED = 0,
    /**
     * @generated from protobuf enum value: RESIDENT_KEY_PREFERRED = 1;
     */
    RESIDENT_KEY_PREFERRED = 1,
    /**
     * @generated from protobuf enum value: RESIDENT_KEY_REQUIRED = 2;
     */
    RESIDENT_KEY_REQUIRED = 2
}
/**
 * @generated from protobuf enum pomerium.dashboard.WebAuthnOptions.UserVerificationRequirement
 */
export enum WebAuthnOptions_UserVerificationRequirement {
    /**
     * @generated from protobuf enum value: USER_VERIFICATION_DISCOURAGED = 0;
     */
    USER_VERIFICATION_DISCOURAGED = 0,
    /**
     * @generated from protobuf enum value: USER_VERIFICATION_PREFERRED = 1;
     */
    USER_VERIFICATION_PREFERRED = 1,
    /**
     * @generated from protobuf enum value: USER_VERIFICATION_REQUIRED = 2;
     */
    USER_VERIFICATION_REQUIRED = 2
}
/**
 * A DeviceType constrains which kinds of devices are allowed to be registered.
 *
 * @generated from protobuf message pomerium.dashboard.DeviceType
 */
export interface DeviceType {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf oneof: specifier
     */
    specifier: {
        oneofKind: "webauthn";
        /**
         * @generated from protobuf field: pomerium.dashboard.DeviceType.WebAuthn webauthn = 6;
         */
        webauthn: DeviceType_WebAuthn;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message pomerium.dashboard.DeviceType.WebAuthn
 */
export interface DeviceType_WebAuthn {
    /**
     * @generated from protobuf field: pomerium.dashboard.WebAuthnOptions options = 1;
     */
    options?: WebAuthnOptions;
}
/**
 * A DeviceEnrollment is used to approve a user's device.
 *
 * @generated from protobuf message pomerium.dashboard.DeviceEnrollment
 */
export interface DeviceEnrollment {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string device_type_id = 5;
     */
    deviceTypeId: string;
    /**
     * @generated from protobuf field: string device_credential_id = 6;
     */
    deviceCredentialId: string;
    /**
     * @generated from protobuf field: string user_id = 7;
     */
    userId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp approved_at = 8;
     */
    approvedAt?: Timestamp;
    /**
     * @generated from protobuf field: string approved_by_user_id = 9;
     */
    approvedByUserId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp enrolled_at = 10;
     */
    enrolledAt?: Timestamp;
    /**
     * @generated from protobuf field: string user_agent = 11;
     */
    userAgent: string;
    /**
     * @generated from protobuf field: string ip_address = 12;
     */
    ipAddress: string;
}
/**
 * A DeviceCredential is a user's device-specific credential.
 *
 * @generated from protobuf message pomerium.dashboard.DeviceCredential
 */
export interface DeviceCredential {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string device_type_id = 5;
     */
    deviceTypeId: string;
    /**
     * @generated from protobuf field: string device_enrollment_id = 6;
     */
    deviceEnrollmentId: string;
    /**
     * @generated from protobuf field: string user_id = 7;
     */
    userId: string;
    /**
     * @generated from protobuf oneof: specifier
     */
    specifier: {
        oneofKind: "webauthn";
        /**
         * @generated from protobuf field: pomerium.dashboard.DeviceCredential.WebAuthn webauthn = 8;
         */
        webauthn: DeviceCredential_WebAuthn;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message pomerium.dashboard.DeviceCredential.WebAuthn
 */
export interface DeviceCredential_WebAuthn {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: bytes public_key = 2;
     */
    publicKey: Uint8Array;
    /**
     * the options that were used to do initial registration
     *
     * @generated from protobuf field: bytes register_options = 3;
     */
    registerOptions: Uint8Array;
    /**
     * the response returned from initial registration
     *
     * @generated from protobuf field: bytes register_response = 4;
     */
    registerResponse: Uint8Array;
    /**
     * subsequent authenticate responses
     *
     * @generated from protobuf field: repeated bytes authenticate_response = 5;
     */
    authenticateResponse: Uint8Array[];
}
/**
 * A DeviceOwnerCredentialRecord is used to track credential owners to prevent
 * credential re-use.
 *
 * @generated from protobuf message pomerium.dashboard.DeviceOwnerCredentialRecord
 */
export interface DeviceOwnerCredentialRecord {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: bytes owner_id = 2;
     */
    ownerId: Uint8Array;
    /**
     * @generated from protobuf field: bytes public_key = 3;
     */
    publicKey: Uint8Array;
}
/**
 * @generated from protobuf message pomerium.dashboard.ApproveDeviceRequest
 */
export interface ApproveDeviceRequest {
    /**
     * @generated from protobuf oneof: id
     */
    id: {
        oneofKind: "credentialId";
        /**
         * @generated from protobuf field: string credential_id = 1;
         */
        credentialId: string;
    } | {
        oneofKind: "enrollmentId";
        /**
         * @generated from protobuf field: string enrollment_id = 2;
         */
        enrollmentId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message pomerium.dashboard.CreateDeviceEnrollmentRequest
 */
export interface CreateDeviceEnrollmentRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceEnrollment enrollment = 1;
     */
    enrollment?: DeviceEnrollment;
    /**
     * @generated from protobuf field: string route_url = 3;
     */
    routeUrl: string;
    /**
     * @generated from protobuf field: string redirect_url = 2;
     */
    redirectUrl: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.CreateDeviceEnrollmentResponse
 */
export interface CreateDeviceEnrollmentResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceEnrollment enrollment = 1;
     */
    enrollment?: DeviceEnrollment;
    /**
     * @generated from protobuf field: string enrollment_url = 2;
     */
    enrollmentUrl: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteDeviceRequest
 */
export interface DeleteDeviceRequest {
    /**
     * @generated from protobuf oneof: id
     */
    id: {
        oneofKind: "credentialId";
        /**
         * @generated from protobuf field: string credential_id = 1;
         */
        credentialId: string;
    } | {
        oneofKind: "enrollmentId";
        /**
         * @generated from protobuf field: string enrollment_id = 2;
         */
        enrollmentId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteDeviceTypeRequest
 */
export interface DeleteDeviceTypeRequest {
    /**
     * @generated from protobuf field: string type_id = 1;
     */
    typeId: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDevicesRequest
 */
export interface ListDevicesRequest {
    /**
     * @generated from protobuf field: optional string type_id = 1;
     */
    typeId?: string;
    /**
     * @generated from protobuf field: optional string user_id = 2;
     */
    userId?: string;
    /**
     * @generated from protobuf field: optional string approved_by = 3;
     */
    approvedBy?: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDevicesResponse
 */
export interface ListDevicesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.ListDevicesResponse.Device devices = 4;
     */
    devices: ListDevicesResponse_Device[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDevicesResponse.Device
 */
export interface ListDevicesResponse_Device {
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceType type = 1;
     */
    type?: DeviceType;
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceCredential credential = 2;
     */
    credential?: DeviceCredential;
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceEnrollment enrollment = 3;
     */
    enrollment?: DeviceEnrollment;
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceKind kind = 4;
     */
    kind: DeviceKind;
    /**
     * @generated from protobuf field: string user_name = 5;
     */
    userName: string;
    /**
     * @generated from protobuf field: string approved_by_user_name = 6;
     */
    approvedByUserName: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListDeviceTypesResponse
 */
export interface ListDeviceTypesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.DeviceType types = 1;
     */
    types: DeviceType[];
}
/**
 * @generated from protobuf message pomerium.dashboard.SetDeviceTypeRequest
 */
export interface SetDeviceTypeRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceType type = 1;
     */
    type?: DeviceType;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetDeviceTypeResponse
 */
export interface SetDeviceTypeResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.DeviceType type = 1;
     */
    type?: DeviceType;
}
/**
 * @generated from protobuf enum pomerium.dashboard.DeviceKind
 */
export enum DeviceKind {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: FIDO_U2F = 1;
     */
    FIDO_U2F = 1,
    /**
     * @generated from protobuf enum value: ANDROID = 2;
     */
    ANDROID = 2,
    /**
     * @generated from protobuf enum value: APPLE = 3;
     */
    APPLE = 3,
    /**
     * @generated from protobuf enum value: TPM = 4;
     */
    TPM = 4,
    /**
     * @generated from protobuf enum value: WINDOWS = 5;
     */
    WINDOWS = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnOptions$Type extends MessageType<WebAuthnOptions> {
    constructor() {
        super("pomerium.dashboard.WebAuthnOptions", [
            { no: 1, name: "attestation", kind: "enum", opt: true, T: () => ["pomerium.dashboard.WebAuthnOptions.AttestationConveyancePreference", WebAuthnOptions_AttestationConveyancePreference] },
            { no: 2, name: "authenticator_selection", kind: "message", T: () => WebAuthnOptions_AuthenticatorSelectionCriteria },
            { no: 3, name: "pub_key_cred_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebAuthnOptions_PublicKeyCredentialParameters }
        ]);
    }
    create(value?: PartialMessage<WebAuthnOptions>): WebAuthnOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pubKeyCredParams = [];
        if (value !== undefined)
            reflectionMergePartial<WebAuthnOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnOptions): WebAuthnOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional pomerium.dashboard.WebAuthnOptions.AttestationConveyancePreference attestation */ 1:
                    message.attestation = reader.int32();
                    break;
                case /* optional pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria authenticator_selection */ 2:
                    message.authenticatorSelection = WebAuthnOptions_AuthenticatorSelectionCriteria.internalBinaryRead(reader, reader.uint32(), options, message.authenticatorSelection);
                    break;
                case /* repeated pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters pub_key_cred_params */ 3:
                    message.pubKeyCredParams.push(WebAuthnOptions_PublicKeyCredentialParameters.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional pomerium.dashboard.WebAuthnOptions.AttestationConveyancePreference attestation = 1; */
        if (message.attestation !== undefined)
            writer.tag(1, WireType.Varint).int32(message.attestation);
        /* optional pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria authenticator_selection = 2; */
        if (message.authenticatorSelection)
            WebAuthnOptions_AuthenticatorSelectionCriteria.internalBinaryWrite(message.authenticatorSelection, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters pub_key_cred_params = 3; */
        for (let i = 0; i < message.pubKeyCredParams.length; i++)
            WebAuthnOptions_PublicKeyCredentialParameters.internalBinaryWrite(message.pubKeyCredParams[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.WebAuthnOptions
 */
export const WebAuthnOptions = new WebAuthnOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnOptions_AuthenticatorSelectionCriteria$Type extends MessageType<WebAuthnOptions_AuthenticatorSelectionCriteria> {
    constructor() {
        super("pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria", [
            { no: 1, name: "authenticator_attachment", kind: "enum", opt: true, T: () => ["pomerium.dashboard.WebAuthnOptions.AuthenticatorAttachment", WebAuthnOptions_AuthenticatorAttachment] },
            { no: 2, name: "require_resident_key", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "resident_key_requirement", kind: "enum", opt: true, T: () => ["pomerium.dashboard.WebAuthnOptions.ResidentKeyRequirement", WebAuthnOptions_ResidentKeyRequirement] },
            { no: 4, name: "user_verification", kind: "enum", opt: true, T: () => ["pomerium.dashboard.WebAuthnOptions.UserVerificationRequirement", WebAuthnOptions_UserVerificationRequirement] }
        ]);
    }
    create(value?: PartialMessage<WebAuthnOptions_AuthenticatorSelectionCriteria>): WebAuthnOptions_AuthenticatorSelectionCriteria {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WebAuthnOptions_AuthenticatorSelectionCriteria>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnOptions_AuthenticatorSelectionCriteria): WebAuthnOptions_AuthenticatorSelectionCriteria {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional pomerium.dashboard.WebAuthnOptions.AuthenticatorAttachment authenticator_attachment */ 1:
                    message.authenticatorAttachment = reader.int32();
                    break;
                case /* optional bool require_resident_key */ 2:
                    message.requireResidentKey = reader.bool();
                    break;
                case /* optional pomerium.dashboard.WebAuthnOptions.ResidentKeyRequirement resident_key_requirement */ 3:
                    message.residentKeyRequirement = reader.int32();
                    break;
                case /* optional pomerium.dashboard.WebAuthnOptions.UserVerificationRequirement user_verification */ 4:
                    message.userVerification = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnOptions_AuthenticatorSelectionCriteria, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional pomerium.dashboard.WebAuthnOptions.AuthenticatorAttachment authenticator_attachment = 1; */
        if (message.authenticatorAttachment !== undefined)
            writer.tag(1, WireType.Varint).int32(message.authenticatorAttachment);
        /* optional bool require_resident_key = 2; */
        if (message.requireResidentKey !== undefined)
            writer.tag(2, WireType.Varint).bool(message.requireResidentKey);
        /* optional pomerium.dashboard.WebAuthnOptions.ResidentKeyRequirement resident_key_requirement = 3; */
        if (message.residentKeyRequirement !== undefined)
            writer.tag(3, WireType.Varint).int32(message.residentKeyRequirement);
        /* optional pomerium.dashboard.WebAuthnOptions.UserVerificationRequirement user_verification = 4; */
        if (message.userVerification !== undefined)
            writer.tag(4, WireType.Varint).int32(message.userVerification);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.WebAuthnOptions.AuthenticatorSelectionCriteria
 */
export const WebAuthnOptions_AuthenticatorSelectionCriteria = new WebAuthnOptions_AuthenticatorSelectionCriteria$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnOptions_PublicKeyCredentialParameters$Type extends MessageType<WebAuthnOptions_PublicKeyCredentialParameters> {
    constructor() {
        super("pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters", [
            { no: 1, name: "alg", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialType", WebAuthnOptions_PublicKeyCredentialType] }
        ]);
    }
    create(value?: PartialMessage<WebAuthnOptions_PublicKeyCredentialParameters>): WebAuthnOptions_PublicKeyCredentialParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alg = 0n;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<WebAuthnOptions_PublicKeyCredentialParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnOptions_PublicKeyCredentialParameters): WebAuthnOptions_PublicKeyCredentialParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 alg */ 1:
                    message.alg = reader.int64().toBigInt();
                    break;
                case /* pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnOptions_PublicKeyCredentialParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 alg = 1; */
        if (message.alg !== 0n)
            writer.tag(1, WireType.Varint).int64(message.alg);
        /* pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.WebAuthnOptions.PublicKeyCredentialParameters
 */
export const WebAuthnOptions_PublicKeyCredentialParameters = new WebAuthnOptions_PublicKeyCredentialParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceType$Type extends MessageType<DeviceType> {
    constructor() {
        super("pomerium.dashboard.DeviceType", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "webauthn", kind: "message", oneof: "specifier", T: () => DeviceType_WebAuthn }
        ]);
    }
    create(value?: PartialMessage<DeviceType>): DeviceType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.specifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DeviceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceType): DeviceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* pomerium.dashboard.DeviceType.WebAuthn webauthn */ 6:
                    message.specifier = {
                        oneofKind: "webauthn",
                        webauthn: DeviceType_WebAuthn.internalBinaryRead(reader, reader.uint32(), options, (message.specifier as any).webauthn)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* pomerium.dashboard.DeviceType.WebAuthn webauthn = 6; */
        if (message.specifier.oneofKind === "webauthn")
            DeviceType_WebAuthn.internalBinaryWrite(message.specifier.webauthn, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceType
 */
export const DeviceType = new DeviceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceType_WebAuthn$Type extends MessageType<DeviceType_WebAuthn> {
    constructor() {
        super("pomerium.dashboard.DeviceType.WebAuthn", [
            { no: 1, name: "options", kind: "message", T: () => WebAuthnOptions }
        ]);
    }
    create(value?: PartialMessage<DeviceType_WebAuthn>): DeviceType_WebAuthn {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeviceType_WebAuthn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceType_WebAuthn): DeviceType_WebAuthn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.WebAuthnOptions options */ 1:
                    message.options = WebAuthnOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceType_WebAuthn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.WebAuthnOptions options = 1; */
        if (message.options)
            WebAuthnOptions.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceType.WebAuthn
 */
export const DeviceType_WebAuthn = new DeviceType_WebAuthn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceEnrollment$Type extends MessageType<DeviceEnrollment> {
    constructor() {
        super("pomerium.dashboard.DeviceEnrollment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "device_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "device_credential_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "approved_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "approved_by_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "enrolled_at", kind: "message", T: () => Timestamp },
            { no: 11, name: "user_agent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "ip_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceEnrollment>): DeviceEnrollment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.deviceTypeId = "";
        message.deviceCredentialId = "";
        message.userId = "";
        message.approvedByUserId = "";
        message.userAgent = "";
        message.ipAddress = "";
        if (value !== undefined)
            reflectionMergePartial<DeviceEnrollment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceEnrollment): DeviceEnrollment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string device_type_id */ 5:
                    message.deviceTypeId = reader.string();
                    break;
                case /* string device_credential_id */ 6:
                    message.deviceCredentialId = reader.string();
                    break;
                case /* string user_id */ 7:
                    message.userId = reader.string();
                    break;
                case /* google.protobuf.Timestamp approved_at */ 8:
                    message.approvedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.approvedAt);
                    break;
                case /* string approved_by_user_id */ 9:
                    message.approvedByUserId = reader.string();
                    break;
                case /* google.protobuf.Timestamp enrolled_at */ 10:
                    message.enrolledAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.enrolledAt);
                    break;
                case /* string user_agent */ 11:
                    message.userAgent = reader.string();
                    break;
                case /* string ip_address */ 12:
                    message.ipAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceEnrollment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string device_type_id = 5; */
        if (message.deviceTypeId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceTypeId);
        /* string device_credential_id = 6; */
        if (message.deviceCredentialId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.deviceCredentialId);
        /* string user_id = 7; */
        if (message.userId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userId);
        /* google.protobuf.Timestamp approved_at = 8; */
        if (message.approvedAt)
            Timestamp.internalBinaryWrite(message.approvedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string approved_by_user_id = 9; */
        if (message.approvedByUserId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.approvedByUserId);
        /* google.protobuf.Timestamp enrolled_at = 10; */
        if (message.enrolledAt)
            Timestamp.internalBinaryWrite(message.enrolledAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string user_agent = 11; */
        if (message.userAgent !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.userAgent);
        /* string ip_address = 12; */
        if (message.ipAddress !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.ipAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceEnrollment
 */
export const DeviceEnrollment = new DeviceEnrollment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCredential$Type extends MessageType<DeviceCredential> {
    constructor() {
        super("pomerium.dashboard.DeviceCredential", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "device_type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "device_enrollment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "webauthn", kind: "message", oneof: "specifier", T: () => DeviceCredential_WebAuthn }
        ]);
    }
    create(value?: PartialMessage<DeviceCredential>): DeviceCredential {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.deviceTypeId = "";
        message.deviceEnrollmentId = "";
        message.userId = "";
        message.specifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DeviceCredential>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCredential): DeviceCredential {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string device_type_id */ 5:
                    message.deviceTypeId = reader.string();
                    break;
                case /* string device_enrollment_id */ 6:
                    message.deviceEnrollmentId = reader.string();
                    break;
                case /* string user_id */ 7:
                    message.userId = reader.string();
                    break;
                case /* pomerium.dashboard.DeviceCredential.WebAuthn webauthn */ 8:
                    message.specifier = {
                        oneofKind: "webauthn",
                        webauthn: DeviceCredential_WebAuthn.internalBinaryRead(reader, reader.uint32(), options, (message.specifier as any).webauthn)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCredential, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string device_type_id = 5; */
        if (message.deviceTypeId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceTypeId);
        /* string device_enrollment_id = 6; */
        if (message.deviceEnrollmentId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.deviceEnrollmentId);
        /* string user_id = 7; */
        if (message.userId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userId);
        /* pomerium.dashboard.DeviceCredential.WebAuthn webauthn = 8; */
        if (message.specifier.oneofKind === "webauthn")
            DeviceCredential_WebAuthn.internalBinaryWrite(message.specifier.webauthn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceCredential
 */
export const DeviceCredential = new DeviceCredential$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceCredential_WebAuthn$Type extends MessageType<DeviceCredential_WebAuthn> {
    constructor() {
        super("pomerium.dashboard.DeviceCredential.WebAuthn", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "public_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "register_options", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "register_response", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "authenticate_response", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceCredential_WebAuthn>): DeviceCredential_WebAuthn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.publicKey = new Uint8Array(0);
        message.registerOptions = new Uint8Array(0);
        message.registerResponse = new Uint8Array(0);
        message.authenticateResponse = [];
        if (value !== undefined)
            reflectionMergePartial<DeviceCredential_WebAuthn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceCredential_WebAuthn): DeviceCredential_WebAuthn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* bytes public_key */ 2:
                    message.publicKey = reader.bytes();
                    break;
                case /* bytes register_options */ 3:
                    message.registerOptions = reader.bytes();
                    break;
                case /* bytes register_response */ 4:
                    message.registerResponse = reader.bytes();
                    break;
                case /* repeated bytes authenticate_response */ 5:
                    message.authenticateResponse.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceCredential_WebAuthn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* bytes public_key = 2; */
        if (message.publicKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.publicKey);
        /* bytes register_options = 3; */
        if (message.registerOptions.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.registerOptions);
        /* bytes register_response = 4; */
        if (message.registerResponse.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.registerResponse);
        /* repeated bytes authenticate_response = 5; */
        for (let i = 0; i < message.authenticateResponse.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.authenticateResponse[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceCredential.WebAuthn
 */
export const DeviceCredential_WebAuthn = new DeviceCredential_WebAuthn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceOwnerCredentialRecord$Type extends MessageType<DeviceOwnerCredentialRecord> {
    constructor() {
        super("pomerium.dashboard.DeviceOwnerCredentialRecord", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "owner_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "public_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DeviceOwnerCredentialRecord>): DeviceOwnerCredentialRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.ownerId = new Uint8Array(0);
        message.publicKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeviceOwnerCredentialRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceOwnerCredentialRecord): DeviceOwnerCredentialRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* bytes owner_id */ 2:
                    message.ownerId = reader.bytes();
                    break;
                case /* bytes public_key */ 3:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceOwnerCredentialRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* bytes owner_id = 2; */
        if (message.ownerId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.ownerId);
        /* bytes public_key = 3; */
        if (message.publicKey.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeviceOwnerCredentialRecord
 */
export const DeviceOwnerCredentialRecord = new DeviceOwnerCredentialRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApproveDeviceRequest$Type extends MessageType<ApproveDeviceRequest> {
    constructor() {
        super("pomerium.dashboard.ApproveDeviceRequest", [
            { no: 1, name: "credential_id", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "enrollment_id", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApproveDeviceRequest>): ApproveDeviceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ApproveDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApproveDeviceRequest): ApproveDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string credential_id */ 1:
                    message.id = {
                        oneofKind: "credentialId",
                        credentialId: reader.string()
                    };
                    break;
                case /* string enrollment_id */ 2:
                    message.id = {
                        oneofKind: "enrollmentId",
                        enrollmentId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApproveDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string credential_id = 1; */
        if (message.id.oneofKind === "credentialId")
            writer.tag(1, WireType.LengthDelimited).string(message.id.credentialId);
        /* string enrollment_id = 2; */
        if (message.id.oneofKind === "enrollmentId")
            writer.tag(2, WireType.LengthDelimited).string(message.id.enrollmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ApproveDeviceRequest
 */
export const ApproveDeviceRequest = new ApproveDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceEnrollmentRequest$Type extends MessageType<CreateDeviceEnrollmentRequest> {
    constructor() {
        super("pomerium.dashboard.CreateDeviceEnrollmentRequest", [
            { no: 1, name: "enrollment", kind: "message", T: () => DeviceEnrollment },
            { no: 3, name: "route_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "redirect_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDeviceEnrollmentRequest>): CreateDeviceEnrollmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeUrl = "";
        message.redirectUrl = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDeviceEnrollmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeviceEnrollmentRequest): CreateDeviceEnrollmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.DeviceEnrollment enrollment */ 1:
                    message.enrollment = DeviceEnrollment.internalBinaryRead(reader, reader.uint32(), options, message.enrollment);
                    break;
                case /* string route_url */ 3:
                    message.routeUrl = reader.string();
                    break;
                case /* string redirect_url */ 2:
                    message.redirectUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeviceEnrollmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.DeviceEnrollment enrollment = 1; */
        if (message.enrollment)
            DeviceEnrollment.internalBinaryWrite(message.enrollment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string route_url = 3; */
        if (message.routeUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.routeUrl);
        /* string redirect_url = 2; */
        if (message.redirectUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.redirectUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.CreateDeviceEnrollmentRequest
 */
export const CreateDeviceEnrollmentRequest = new CreateDeviceEnrollmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceEnrollmentResponse$Type extends MessageType<CreateDeviceEnrollmentResponse> {
    constructor() {
        super("pomerium.dashboard.CreateDeviceEnrollmentResponse", [
            { no: 1, name: "enrollment", kind: "message", T: () => DeviceEnrollment },
            { no: 2, name: "enrollment_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDeviceEnrollmentResponse>): CreateDeviceEnrollmentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enrollmentUrl = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDeviceEnrollmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeviceEnrollmentResponse): CreateDeviceEnrollmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.DeviceEnrollment enrollment */ 1:
                    message.enrollment = DeviceEnrollment.internalBinaryRead(reader, reader.uint32(), options, message.enrollment);
                    break;
                case /* string enrollment_url */ 2:
                    message.enrollmentUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeviceEnrollmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.DeviceEnrollment enrollment = 1; */
        if (message.enrollment)
            DeviceEnrollment.internalBinaryWrite(message.enrollment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string enrollment_url = 2; */
        if (message.enrollmentUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.enrollmentUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.CreateDeviceEnrollmentResponse
 */
export const CreateDeviceEnrollmentResponse = new CreateDeviceEnrollmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeviceRequest$Type extends MessageType<DeleteDeviceRequest> {
    constructor() {
        super("pomerium.dashboard.DeleteDeviceRequest", [
            { no: 1, name: "credential_id", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "enrollment_id", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteDeviceRequest>): DeleteDeviceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DeleteDeviceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeviceRequest): DeleteDeviceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string credential_id */ 1:
                    message.id = {
                        oneofKind: "credentialId",
                        credentialId: reader.string()
                    };
                    break;
                case /* string enrollment_id */ 2:
                    message.id = {
                        oneofKind: "enrollmentId",
                        enrollmentId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDeviceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string credential_id = 1; */
        if (message.id.oneofKind === "credentialId")
            writer.tag(1, WireType.LengthDelimited).string(message.id.credentialId);
        /* string enrollment_id = 2; */
        if (message.id.oneofKind === "enrollmentId")
            writer.tag(2, WireType.LengthDelimited).string(message.id.enrollmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteDeviceRequest
 */
export const DeleteDeviceRequest = new DeleteDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeviceTypeRequest$Type extends MessageType<DeleteDeviceTypeRequest> {
    constructor() {
        super("pomerium.dashboard.DeleteDeviceTypeRequest", [
            { no: 1, name: "type_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteDeviceTypeRequest>): DeleteDeviceTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.typeId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteDeviceTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeviceTypeRequest): DeleteDeviceTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type_id */ 1:
                    message.typeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDeviceTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type_id = 1; */
        if (message.typeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.typeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteDeviceTypeRequest
 */
export const DeleteDeviceTypeRequest = new DeleteDeviceTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesRequest$Type extends MessageType<ListDevicesRequest> {
    constructor() {
        super("pomerium.dashboard.ListDevicesRequest", [
            { no: 1, name: "type_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "approved_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDevicesRequest>): ListDevicesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListDevicesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesRequest): ListDevicesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string type_id */ 1:
                    message.typeId = reader.string();
                    break;
                case /* optional string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* optional string approved_by */ 3:
                    message.approvedBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string type_id = 1; */
        if (message.typeId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.typeId);
        /* optional string user_id = 2; */
        if (message.userId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* optional string approved_by = 3; */
        if (message.approvedBy !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.approvedBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDevicesRequest
 */
export const ListDevicesRequest = new ListDevicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesResponse$Type extends MessageType<ListDevicesResponse> {
    constructor() {
        super("pomerium.dashboard.ListDevicesResponse", [
            { no: 4, name: "devices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListDevicesResponse_Device }
        ]);
    }
    create(value?: PartialMessage<ListDevicesResponse>): ListDevicesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.devices = [];
        if (value !== undefined)
            reflectionMergePartial<ListDevicesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesResponse): ListDevicesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.ListDevicesResponse.Device devices */ 4:
                    message.devices.push(ListDevicesResponse_Device.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.ListDevicesResponse.Device devices = 4; */
        for (let i = 0; i < message.devices.length; i++)
            ListDevicesResponse_Device.internalBinaryWrite(message.devices[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDevicesResponse
 */
export const ListDevicesResponse = new ListDevicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDevicesResponse_Device$Type extends MessageType<ListDevicesResponse_Device> {
    constructor() {
        super("pomerium.dashboard.ListDevicesResponse.Device", [
            { no: 1, name: "type", kind: "message", T: () => DeviceType },
            { no: 2, name: "credential", kind: "message", T: () => DeviceCredential },
            { no: 3, name: "enrollment", kind: "message", T: () => DeviceEnrollment },
            { no: 4, name: "kind", kind: "enum", T: () => ["pomerium.dashboard.DeviceKind", DeviceKind] },
            { no: 5, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "approved_by_user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListDevicesResponse_Device>): ListDevicesResponse_Device {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.kind = 0;
        message.userName = "";
        message.approvedByUserName = "";
        if (value !== undefined)
            reflectionMergePartial<ListDevicesResponse_Device>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDevicesResponse_Device): ListDevicesResponse_Device {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.DeviceType type */ 1:
                    message.type = DeviceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* pomerium.dashboard.DeviceCredential credential */ 2:
                    message.credential = DeviceCredential.internalBinaryRead(reader, reader.uint32(), options, message.credential);
                    break;
                case /* pomerium.dashboard.DeviceEnrollment enrollment */ 3:
                    message.enrollment = DeviceEnrollment.internalBinaryRead(reader, reader.uint32(), options, message.enrollment);
                    break;
                case /* pomerium.dashboard.DeviceKind kind */ 4:
                    message.kind = reader.int32();
                    break;
                case /* string user_name */ 5:
                    message.userName = reader.string();
                    break;
                case /* string approved_by_user_name */ 6:
                    message.approvedByUserName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDevicesResponse_Device, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.DeviceType type = 1; */
        if (message.type)
            DeviceType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* pomerium.dashboard.DeviceCredential credential = 2; */
        if (message.credential)
            DeviceCredential.internalBinaryWrite(message.credential, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* pomerium.dashboard.DeviceEnrollment enrollment = 3; */
        if (message.enrollment)
            DeviceEnrollment.internalBinaryWrite(message.enrollment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* pomerium.dashboard.DeviceKind kind = 4; */
        if (message.kind !== 0)
            writer.tag(4, WireType.Varint).int32(message.kind);
        /* string user_name = 5; */
        if (message.userName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userName);
        /* string approved_by_user_name = 6; */
        if (message.approvedByUserName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.approvedByUserName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDevicesResponse.Device
 */
export const ListDevicesResponse_Device = new ListDevicesResponse_Device$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDeviceTypesResponse$Type extends MessageType<ListDeviceTypesResponse> {
    constructor() {
        super("pomerium.dashboard.ListDeviceTypesResponse", [
            { no: 1, name: "types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DeviceType }
        ]);
    }
    create(value?: PartialMessage<ListDeviceTypesResponse>): ListDeviceTypesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<ListDeviceTypesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDeviceTypesResponse): ListDeviceTypesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.DeviceType types */ 1:
                    message.types.push(DeviceType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDeviceTypesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.DeviceType types = 1; */
        for (let i = 0; i < message.types.length; i++)
            DeviceType.internalBinaryWrite(message.types[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListDeviceTypesResponse
 */
export const ListDeviceTypesResponse = new ListDeviceTypesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDeviceTypeRequest$Type extends MessageType<SetDeviceTypeRequest> {
    constructor() {
        super("pomerium.dashboard.SetDeviceTypeRequest", [
            { no: 1, name: "type", kind: "message", T: () => DeviceType }
        ]);
    }
    create(value?: PartialMessage<SetDeviceTypeRequest>): SetDeviceTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetDeviceTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDeviceTypeRequest): SetDeviceTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.DeviceType type */ 1:
                    message.type = DeviceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDeviceTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.DeviceType type = 1; */
        if (message.type)
            DeviceType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetDeviceTypeRequest
 */
export const SetDeviceTypeRequest = new SetDeviceTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDeviceTypeResponse$Type extends MessageType<SetDeviceTypeResponse> {
    constructor() {
        super("pomerium.dashboard.SetDeviceTypeResponse", [
            { no: 1, name: "type", kind: "message", T: () => DeviceType }
        ]);
    }
    create(value?: PartialMessage<SetDeviceTypeResponse>): SetDeviceTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetDeviceTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDeviceTypeResponse): SetDeviceTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.DeviceType type */ 1:
                    message.type = DeviceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDeviceTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.DeviceType type = 1; */
        if (message.type)
            DeviceType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetDeviceTypeResponse
 */
export const SetDeviceTypeResponse = new SetDeviceTypeResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.DeviceService
 */
export const DeviceService = new ServiceType("pomerium.dashboard.DeviceService", [
    { name: "ApproveDevice", options: {}, I: ApproveDeviceRequest, O: Empty },
    { name: "CreateDeviceEnrollment", options: {}, I: CreateDeviceEnrollmentRequest, O: CreateDeviceEnrollmentResponse },
    { name: "SetDeviceType", options: {}, I: SetDeviceTypeRequest, O: SetDeviceTypeResponse },
    { name: "DeleteDevice", options: {}, I: DeleteDeviceRequest, O: Empty },
    { name: "DeleteDeviceType", options: {}, I: DeleteDeviceTypeRequest, O: Empty },
    { name: "ListDevices", options: {}, I: ListDevicesRequest, O: ListDevicesResponse },
    { name: "ListDeviceTypes", options: {}, I: Empty, O: ListDeviceTypesResponse }
]);
