// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "namespaces.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * Namespace defines a namespace
 *
 * @generated from protobuf message pomerium.dashboard.Namespace
 */
export interface Namespace {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string parent_id = 2;
     */
    parentId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 4;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 5;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @generated from protobuf field: string originator_id = 9;
     */
    originatorId: string;
    /**
     * computed
     *
     * @generated from protobuf field: int64 route_count = 7;
     */
    routeCount: bigint;
    /**
     * computed
     *
     * @generated from protobuf field: int64 policy_count = 8;
     */
    policyCount: bigint;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteNamespaceRequest
 */
export interface DeleteNamespaceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteNamespaceResponse
 */
export interface DeleteNamespaceResponse {
}
/**
 * @generated from protobuf message pomerium.dashboard.GetNamespaceRequest
 */
export interface GetNamespaceRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetNamespaceResponse
 */
export interface GetNamespaceResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.Namespace namespace = 1;
     */
    namespace?: Namespace;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacesRequest
 */
export interface ListNamespacesRequest {
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacesResponse
 */
export interface ListNamespacesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.Namespace namespaces = 1;
     */
    namespaces: Namespace[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespaceResourcesRequest
 */
export interface ListNamespaceResourcesRequest {
    /**
     * @generated from protobuf field: repeated string ids = 1;
     */
    ids: string[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespaceResourcesResponse
 */
export interface ListNamespaceResourcesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.ListNamespaceResourcesResponse.Resource resources = 1;
     */
    resources: ListNamespaceResourcesResponse_Resource[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespaceResourcesResponse.Resource
 */
export interface ListNamespaceResourcesResponse_Resource {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetNamespaceRequest
 */
export interface SetNamespaceRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.Namespace namespace = 1;
     */
    namespace?: Namespace;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetNamespaceResponse
 */
export interface SetNamespaceResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.Namespace namespace = 1;
     */
    namespace?: Namespace;
}
/**
 * NamespacePermission defines a permission binding to an identity
 *
 * @generated from protobuf message pomerium.dashboard.NamespacePermission
 */
export interface NamespacePermission {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: string namespace_id = 4;
     */
    namespaceId: string;
    /**
     * @generated from protobuf field: string namespace_name = 8;
     */
    namespaceName: string;
    /**
     * @generated from protobuf field: string subject_type = 5;
     */
    subjectType: string;
    /**
     * @generated from protobuf field: string subject_id = 6;
     */
    subjectId: string;
    /**
     * @generated from protobuf field: string role = 7;
     */
    role: string;
}
/**
 * NamespacePermissionGroup defines a permission binding to a group identity
 *
 * @generated from protobuf message pomerium.dashboard.NamespacePermissionGroup
 */
export interface NamespacePermissionGroup {
    /**
     * @generated from protobuf field: string group_id = 1;
     */
    groupId: string;
    /**
     * @generated from protobuf field: string group_name = 2;
     */
    groupName: string;
    /**
     * @generated from protobuf field: string group_email = 3;
     */
    groupEmail: string;
    /**
     * @generated from protobuf field: string namespace_id = 4;
     */
    namespaceId: string;
    /**
     * @generated from protobuf field: string namespace_name = 5;
     */
    namespaceName: string;
    /**
     * @generated from protobuf field: string role = 6;
     */
    role: string;
}
/**
 * NamespacePermissionUser defines a permission binding to a user identity
 *
 * @generated from protobuf message pomerium.dashboard.NamespacePermissionUser
 */
export interface NamespacePermissionUser {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: string user_email = 3;
     */
    userEmail: string;
    /**
     * @generated from protobuf field: repeated string group_ids = 4;
     */
    groupIds: string[];
    /**
     * @generated from protobuf field: string namespace_id = 5;
     */
    namespaceId: string;
    /**
     * @generated from protobuf field: string namespace_name = 7;
     */
    namespaceName: string;
    /**
     * @generated from protobuf field: string role = 6;
     */
    role: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteNamespacePermissionRequest
 */
export interface DeleteNamespacePermissionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeleteNamespacePermissionResponse
 */
export interface DeleteNamespacePermissionResponse {
}
/**
 * @generated from protobuf message pomerium.dashboard.GetNamespacePermissionRequest
 */
export interface GetNamespacePermissionRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetNamespacePermissionResponse
 */
export interface GetNamespacePermissionResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.NamespacePermission namespace_permission = 1;
     */
    namespacePermission?: NamespacePermission;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionsRequest
 */
export interface ListNamespacePermissionsRequest {
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionsResponse
 */
export interface ListNamespacePermissionsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.NamespacePermission namespace_permissions = 1;
     */
    namespacePermissions: NamespacePermission[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionGroupsRequest
 */
export interface ListNamespacePermissionGroupsRequest {
    /**
     * @generated from protobuf field: string namespace_id = 1;
     */
    namespaceId: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionGroupsResponse
 */
export interface ListNamespacePermissionGroupsResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.NamespacePermissionGroup groups = 1;
     */
    groups: NamespacePermissionGroup[];
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionUsersRequest
 */
export interface ListNamespacePermissionUsersRequest {
    /**
     * @generated from protobuf field: string namespace_id = 1;
     */
    namespaceId: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.ListNamespacePermissionUsersResponse
 */
export interface ListNamespacePermissionUsersResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.NamespacePermissionUser users = 1;
     */
    users: NamespacePermissionUser[];
}
/**
 * @generated from protobuf message pomerium.dashboard.SetNamespacePermissionRequest
 */
export interface SetNamespacePermissionRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.NamespacePermission namespace_permission = 1;
     */
    namespacePermission?: NamespacePermission;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetNamespacePermissionResponse
 */
export interface SetNamespacePermissionResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.NamespacePermission namespace_permission = 1;
     */
    namespacePermission?: NamespacePermission;
}
// @generated message type with reflection information, may provide speed optimized methods
class Namespace$Type extends MessageType<Namespace> {
    constructor() {
        super("pomerium.dashboard.Namespace", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "originator_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "route_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "policy_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Namespace>): Namespace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.parentId = "";
        message.name = "";
        message.originatorId = "";
        message.routeCount = 0n;
        message.policyCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<Namespace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Namespace): Namespace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string parent_id */ 2:
                    message.parentId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 4:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 5:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* string originator_id */ 9:
                    message.originatorId = reader.string();
                    break;
                case /* int64 route_count */ 7:
                    message.routeCount = reader.int64().toBigInt();
                    break;
                case /* int64 policy_count */ 8:
                    message.policyCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Namespace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string parent_id = 2; */
        if (message.parentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.parentId);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 4; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 5; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* string originator_id = 9; */
        if (message.originatorId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.originatorId);
        /* int64 route_count = 7; */
        if (message.routeCount !== 0n)
            writer.tag(7, WireType.Varint).int64(message.routeCount);
        /* int64 policy_count = 8; */
        if (message.policyCount !== 0n)
            writer.tag(8, WireType.Varint).int64(message.policyCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.Namespace
 */
export const Namespace = new Namespace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNamespaceRequest$Type extends MessageType<DeleteNamespaceRequest> {
    constructor() {
        super("pomerium.dashboard.DeleteNamespaceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteNamespaceRequest>): DeleteNamespaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteNamespaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNamespaceRequest): DeleteNamespaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNamespaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteNamespaceRequest
 */
export const DeleteNamespaceRequest = new DeleteNamespaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNamespaceResponse$Type extends MessageType<DeleteNamespaceResponse> {
    constructor() {
        super("pomerium.dashboard.DeleteNamespaceResponse", []);
    }
    create(value?: PartialMessage<DeleteNamespaceResponse>): DeleteNamespaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNamespaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNamespaceResponse): DeleteNamespaceResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteNamespaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteNamespaceResponse
 */
export const DeleteNamespaceResponse = new DeleteNamespaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNamespaceRequest$Type extends MessageType<GetNamespaceRequest> {
    constructor() {
        super("pomerium.dashboard.GetNamespaceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetNamespaceRequest>): GetNamespaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetNamespaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNamespaceRequest): GetNamespaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNamespaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetNamespaceRequest
 */
export const GetNamespaceRequest = new GetNamespaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNamespaceResponse$Type extends MessageType<GetNamespaceResponse> {
    constructor() {
        super("pomerium.dashboard.GetNamespaceResponse", [
            { no: 1, name: "namespace", kind: "message", T: () => Namespace }
        ]);
    }
    create(value?: PartialMessage<GetNamespaceResponse>): GetNamespaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNamespaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNamespaceResponse): GetNamespaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Namespace namespace */ 1:
                    message.namespace = Namespace.internalBinaryRead(reader, reader.uint32(), options, message.namespace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNamespaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Namespace namespace = 1; */
        if (message.namespace)
            Namespace.internalBinaryWrite(message.namespace, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetNamespaceResponse
 */
export const GetNamespaceResponse = new GetNamespaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacesRequest$Type extends MessageType<ListNamespacesRequest> {
    constructor() {
        super("pomerium.dashboard.ListNamespacesRequest", []);
    }
    create(value?: PartialMessage<ListNamespacesRequest>): ListNamespacesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListNamespacesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacesRequest): ListNamespacesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListNamespacesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacesRequest
 */
export const ListNamespacesRequest = new ListNamespacesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacesResponse$Type extends MessageType<ListNamespacesResponse> {
    constructor() {
        super("pomerium.dashboard.ListNamespacesResponse", [
            { no: 1, name: "namespaces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Namespace }
        ]);
    }
    create(value?: PartialMessage<ListNamespacesResponse>): ListNamespacesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespaces = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespacesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacesResponse): ListNamespacesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.Namespace namespaces */ 1:
                    message.namespaces.push(Namespace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.Namespace namespaces = 1; */
        for (let i = 0; i < message.namespaces.length; i++)
            Namespace.internalBinaryWrite(message.namespaces[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacesResponse
 */
export const ListNamespacesResponse = new ListNamespacesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceResourcesRequest$Type extends MessageType<ListNamespaceResourcesRequest> {
    constructor() {
        super("pomerium.dashboard.ListNamespaceResourcesRequest", [
            { no: 1, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNamespaceResourcesRequest>): ListNamespaceResourcesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceResourcesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespaceResourcesRequest): ListNamespaceResourcesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ids */ 1:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespaceResourcesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespaceResourcesRequest
 */
export const ListNamespaceResourcesRequest = new ListNamespaceResourcesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceResourcesResponse$Type extends MessageType<ListNamespaceResourcesResponse> {
    constructor() {
        super("pomerium.dashboard.ListNamespaceResourcesResponse", [
            { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListNamespaceResourcesResponse_Resource }
        ]);
    }
    create(value?: PartialMessage<ListNamespaceResourcesResponse>): ListNamespaceResourcesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resources = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceResourcesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespaceResourcesResponse): ListNamespaceResourcesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.ListNamespaceResourcesResponse.Resource resources */ 1:
                    message.resources.push(ListNamespaceResourcesResponse_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespaceResourcesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.ListNamespaceResourcesResponse.Resource resources = 1; */
        for (let i = 0; i < message.resources.length; i++)
            ListNamespaceResourcesResponse_Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespaceResourcesResponse
 */
export const ListNamespaceResourcesResponse = new ListNamespaceResourcesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespaceResourcesResponse_Resource$Type extends MessageType<ListNamespaceResourcesResponse_Resource> {
    constructor() {
        super("pomerium.dashboard.ListNamespaceResourcesResponse.Resource", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNamespaceResourcesResponse_Resource>): ListNamespaceResourcesResponse_Resource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ListNamespaceResourcesResponse_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespaceResourcesResponse_Resource): ListNamespaceResourcesResponse_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespaceResourcesResponse_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespaceResourcesResponse.Resource
 */
export const ListNamespaceResourcesResponse_Resource = new ListNamespaceResourcesResponse_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetNamespaceRequest$Type extends MessageType<SetNamespaceRequest> {
    constructor() {
        super("pomerium.dashboard.SetNamespaceRequest", [
            { no: 1, name: "namespace", kind: "message", T: () => Namespace }
        ]);
    }
    create(value?: PartialMessage<SetNamespaceRequest>): SetNamespaceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetNamespaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetNamespaceRequest): SetNamespaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Namespace namespace */ 1:
                    message.namespace = Namespace.internalBinaryRead(reader, reader.uint32(), options, message.namespace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetNamespaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Namespace namespace = 1; */
        if (message.namespace)
            Namespace.internalBinaryWrite(message.namespace, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetNamespaceRequest
 */
export const SetNamespaceRequest = new SetNamespaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetNamespaceResponse$Type extends MessageType<SetNamespaceResponse> {
    constructor() {
        super("pomerium.dashboard.SetNamespaceResponse", [
            { no: 1, name: "namespace", kind: "message", T: () => Namespace }
        ]);
    }
    create(value?: PartialMessage<SetNamespaceResponse>): SetNamespaceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetNamespaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetNamespaceResponse): SetNamespaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Namespace namespace */ 1:
                    message.namespace = Namespace.internalBinaryRead(reader, reader.uint32(), options, message.namespace);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetNamespaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Namespace namespace = 1; */
        if (message.namespace)
            Namespace.internalBinaryWrite(message.namespace, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetNamespaceResponse
 */
export const SetNamespaceResponse = new SetNamespaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NamespacePermission$Type extends MessageType<NamespacePermission> {
    constructor() {
        super("pomerium.dashboard.NamespacePermission", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "namespace_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "subject_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "subject_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NamespacePermission>): NamespacePermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.namespaceId = "";
        message.namespaceName = "";
        message.subjectType = "";
        message.subjectId = "";
        message.role = "";
        if (value !== undefined)
            reflectionMergePartial<NamespacePermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NamespacePermission): NamespacePermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* string namespace_id */ 4:
                    message.namespaceId = reader.string();
                    break;
                case /* string namespace_name */ 8:
                    message.namespaceName = reader.string();
                    break;
                case /* string subject_type */ 5:
                    message.subjectType = reader.string();
                    break;
                case /* string subject_id */ 6:
                    message.subjectId = reader.string();
                    break;
                case /* string role */ 7:
                    message.role = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NamespacePermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string namespace_id = 4; */
        if (message.namespaceId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.namespaceId);
        /* string namespace_name = 8; */
        if (message.namespaceName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.namespaceName);
        /* string subject_type = 5; */
        if (message.subjectType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.subjectType);
        /* string subject_id = 6; */
        if (message.subjectId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.subjectId);
        /* string role = 7; */
        if (message.role !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.NamespacePermission
 */
export const NamespacePermission = new NamespacePermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NamespacePermissionGroup$Type extends MessageType<NamespacePermissionGroup> {
    constructor() {
        super("pomerium.dashboard.NamespacePermissionGroup", [
            { no: 1, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "group_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "namespace_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NamespacePermissionGroup>): NamespacePermissionGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.groupName = "";
        message.groupEmail = "";
        message.namespaceId = "";
        message.namespaceName = "";
        message.role = "";
        if (value !== undefined)
            reflectionMergePartial<NamespacePermissionGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NamespacePermissionGroup): NamespacePermissionGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_id */ 1:
                    message.groupId = reader.string();
                    break;
                case /* string group_name */ 2:
                    message.groupName = reader.string();
                    break;
                case /* string group_email */ 3:
                    message.groupEmail = reader.string();
                    break;
                case /* string namespace_id */ 4:
                    message.namespaceId = reader.string();
                    break;
                case /* string namespace_name */ 5:
                    message.namespaceName = reader.string();
                    break;
                case /* string role */ 6:
                    message.role = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NamespacePermissionGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_id = 1; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* string group_name = 2; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string group_email = 3; */
        if (message.groupEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupEmail);
        /* string namespace_id = 4; */
        if (message.namespaceId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.namespaceId);
        /* string namespace_name = 5; */
        if (message.namespaceName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.namespaceName);
        /* string role = 6; */
        if (message.role !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.NamespacePermissionGroup
 */
export const NamespacePermissionGroup = new NamespacePermissionGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NamespacePermissionUser$Type extends MessageType<NamespacePermissionUser> {
    constructor() {
        super("pomerium.dashboard.NamespacePermissionUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "group_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "namespace_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NamespacePermissionUser>): NamespacePermissionUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.userName = "";
        message.userEmail = "";
        message.groupIds = [];
        message.namespaceId = "";
        message.namespaceName = "";
        message.role = "";
        if (value !== undefined)
            reflectionMergePartial<NamespacePermissionUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NamespacePermissionUser): NamespacePermissionUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string user_email */ 3:
                    message.userEmail = reader.string();
                    break;
                case /* repeated string group_ids */ 4:
                    message.groupIds.push(reader.string());
                    break;
                case /* string namespace_id */ 5:
                    message.namespaceId = reader.string();
                    break;
                case /* string namespace_name */ 7:
                    message.namespaceName = reader.string();
                    break;
                case /* string role */ 6:
                    message.role = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NamespacePermissionUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string user_email = 3; */
        if (message.userEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userEmail);
        /* repeated string group_ids = 4; */
        for (let i = 0; i < message.groupIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.groupIds[i]);
        /* string namespace_id = 5; */
        if (message.namespaceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.namespaceId);
        /* string namespace_name = 7; */
        if (message.namespaceName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.namespaceName);
        /* string role = 6; */
        if (message.role !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.NamespacePermissionUser
 */
export const NamespacePermissionUser = new NamespacePermissionUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNamespacePermissionRequest$Type extends MessageType<DeleteNamespacePermissionRequest> {
    constructor() {
        super("pomerium.dashboard.DeleteNamespacePermissionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteNamespacePermissionRequest>): DeleteNamespacePermissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteNamespacePermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNamespacePermissionRequest): DeleteNamespacePermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNamespacePermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteNamespacePermissionRequest
 */
export const DeleteNamespacePermissionRequest = new DeleteNamespacePermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNamespacePermissionResponse$Type extends MessageType<DeleteNamespacePermissionResponse> {
    constructor() {
        super("pomerium.dashboard.DeleteNamespacePermissionResponse", []);
    }
    create(value?: PartialMessage<DeleteNamespacePermissionResponse>): DeleteNamespacePermissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNamespacePermissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNamespacePermissionResponse): DeleteNamespacePermissionResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteNamespacePermissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeleteNamespacePermissionResponse
 */
export const DeleteNamespacePermissionResponse = new DeleteNamespacePermissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNamespacePermissionRequest$Type extends MessageType<GetNamespacePermissionRequest> {
    constructor() {
        super("pomerium.dashboard.GetNamespacePermissionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetNamespacePermissionRequest>): GetNamespacePermissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetNamespacePermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNamespacePermissionRequest): GetNamespacePermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNamespacePermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetNamespacePermissionRequest
 */
export const GetNamespacePermissionRequest = new GetNamespacePermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNamespacePermissionResponse$Type extends MessageType<GetNamespacePermissionResponse> {
    constructor() {
        super("pomerium.dashboard.GetNamespacePermissionResponse", [
            { no: 1, name: "namespace_permission", kind: "message", T: () => NamespacePermission }
        ]);
    }
    create(value?: PartialMessage<GetNamespacePermissionResponse>): GetNamespacePermissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNamespacePermissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNamespacePermissionResponse): GetNamespacePermissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.NamespacePermission namespace_permission */ 1:
                    message.namespacePermission = NamespacePermission.internalBinaryRead(reader, reader.uint32(), options, message.namespacePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNamespacePermissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.NamespacePermission namespace_permission = 1; */
        if (message.namespacePermission)
            NamespacePermission.internalBinaryWrite(message.namespacePermission, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetNamespacePermissionResponse
 */
export const GetNamespacePermissionResponse = new GetNamespacePermissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionsRequest$Type extends MessageType<ListNamespacePermissionsRequest> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionsRequest", []);
    }
    create(value?: PartialMessage<ListNamespacePermissionsRequest>): ListNamespacePermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionsRequest): ListNamespacePermissionsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListNamespacePermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionsRequest
 */
export const ListNamespacePermissionsRequest = new ListNamespacePermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionsResponse$Type extends MessageType<ListNamespacePermissionsResponse> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionsResponse", [
            { no: 1, name: "namespace_permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NamespacePermission }
        ]);
    }
    create(value?: PartialMessage<ListNamespacePermissionsResponse>): ListNamespacePermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespacePermissions = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionsResponse): ListNamespacePermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.NamespacePermission namespace_permissions */ 1:
                    message.namespacePermissions.push(NamespacePermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacePermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.NamespacePermission namespace_permissions = 1; */
        for (let i = 0; i < message.namespacePermissions.length; i++)
            NamespacePermission.internalBinaryWrite(message.namespacePermissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionsResponse
 */
export const ListNamespacePermissionsResponse = new ListNamespacePermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionGroupsRequest$Type extends MessageType<ListNamespacePermissionGroupsRequest> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionGroupsRequest", [
            { no: 1, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNamespacePermissionGroupsRequest>): ListNamespacePermissionGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespaceId = "";
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionGroupsRequest): ListNamespacePermissionGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace_id */ 1:
                    message.namespaceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacePermissionGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace_id = 1; */
        if (message.namespaceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespaceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionGroupsRequest
 */
export const ListNamespacePermissionGroupsRequest = new ListNamespacePermissionGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionGroupsResponse$Type extends MessageType<ListNamespacePermissionGroupsResponse> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionGroupsResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NamespacePermissionGroup }
        ]);
    }
    create(value?: PartialMessage<ListNamespacePermissionGroupsResponse>): ListNamespacePermissionGroupsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionGroupsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionGroupsResponse): ListNamespacePermissionGroupsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.NamespacePermissionGroup groups */ 1:
                    message.groups.push(NamespacePermissionGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacePermissionGroupsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.NamespacePermissionGroup groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            NamespacePermissionGroup.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionGroupsResponse
 */
export const ListNamespacePermissionGroupsResponse = new ListNamespacePermissionGroupsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionUsersRequest$Type extends MessageType<ListNamespacePermissionUsersRequest> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionUsersRequest", [
            { no: 1, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNamespacePermissionUsersRequest>): ListNamespacePermissionUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespaceId = "";
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionUsersRequest): ListNamespacePermissionUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace_id */ 1:
                    message.namespaceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacePermissionUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace_id = 1; */
        if (message.namespaceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespaceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionUsersRequest
 */
export const ListNamespacePermissionUsersRequest = new ListNamespacePermissionUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNamespacePermissionUsersResponse$Type extends MessageType<ListNamespacePermissionUsersResponse> {
    constructor() {
        super("pomerium.dashboard.ListNamespacePermissionUsersResponse", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NamespacePermissionUser }
        ]);
    }
    create(value?: PartialMessage<ListNamespacePermissionUsersResponse>): ListNamespacePermissionUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<ListNamespacePermissionUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNamespacePermissionUsersResponse): ListNamespacePermissionUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.NamespacePermissionUser users */ 1:
                    message.users.push(NamespacePermissionUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNamespacePermissionUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.NamespacePermissionUser users = 1; */
        for (let i = 0; i < message.users.length; i++)
            NamespacePermissionUser.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListNamespacePermissionUsersResponse
 */
export const ListNamespacePermissionUsersResponse = new ListNamespacePermissionUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetNamespacePermissionRequest$Type extends MessageType<SetNamespacePermissionRequest> {
    constructor() {
        super("pomerium.dashboard.SetNamespacePermissionRequest", [
            { no: 1, name: "namespace_permission", kind: "message", T: () => NamespacePermission }
        ]);
    }
    create(value?: PartialMessage<SetNamespacePermissionRequest>): SetNamespacePermissionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetNamespacePermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetNamespacePermissionRequest): SetNamespacePermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.NamespacePermission namespace_permission */ 1:
                    message.namespacePermission = NamespacePermission.internalBinaryRead(reader, reader.uint32(), options, message.namespacePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetNamespacePermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.NamespacePermission namespace_permission = 1; */
        if (message.namespacePermission)
            NamespacePermission.internalBinaryWrite(message.namespacePermission, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetNamespacePermissionRequest
 */
export const SetNamespacePermissionRequest = new SetNamespacePermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetNamespacePermissionResponse$Type extends MessageType<SetNamespacePermissionResponse> {
    constructor() {
        super("pomerium.dashboard.SetNamespacePermissionResponse", [
            { no: 1, name: "namespace_permission", kind: "message", T: () => NamespacePermission }
        ]);
    }
    create(value?: PartialMessage<SetNamespacePermissionResponse>): SetNamespacePermissionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetNamespacePermissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetNamespacePermissionResponse): SetNamespacePermissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.NamespacePermission namespace_permission */ 1:
                    message.namespacePermission = NamespacePermission.internalBinaryRead(reader, reader.uint32(), options, message.namespacePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetNamespacePermissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.NamespacePermission namespace_permission = 1; */
        if (message.namespacePermission)
            NamespacePermission.internalBinaryWrite(message.namespacePermission, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetNamespacePermissionResponse
 */
export const SetNamespacePermissionResponse = new SetNamespacePermissionResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.NamespaceService
 */
export const NamespaceService = new ServiceType("pomerium.dashboard.NamespaceService", [
    { name: "DeleteNamespace", options: {}, I: DeleteNamespaceRequest, O: DeleteNamespaceResponse },
    { name: "GetNamespace", options: {}, I: GetNamespaceRequest, O: GetNamespaceResponse },
    { name: "ListNamespaces", options: {}, I: ListNamespacesRequest, O: ListNamespacesResponse },
    { name: "ListNamespaceResources", options: {}, I: ListNamespaceResourcesRequest, O: ListNamespaceResourcesResponse },
    { name: "SetNamespace", options: {}, I: SetNamespaceRequest, O: SetNamespaceResponse }
]);
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.NamespacePermissionService
 */
export const NamespacePermissionService = new ServiceType("pomerium.dashboard.NamespacePermissionService", [
    { name: "DeleteNamespacePermission", options: {}, I: DeleteNamespacePermissionRequest, O: DeleteNamespacePermissionResponse },
    { name: "GetNamespacePermission", options: {}, I: GetNamespacePermissionRequest, O: GetNamespacePermissionResponse },
    { name: "ListNamespacePermissions", options: {}, I: ListNamespacePermissionsRequest, O: ListNamespacePermissionsResponse },
    { name: "ListNamespacePermissionGroups", options: {}, I: ListNamespacePermissionGroupsRequest, O: ListNamespacePermissionGroupsResponse },
    { name: "ListNamespacePermissionUsers", options: {}, I: ListNamespacePermissionUsersRequest, O: ListNamespacePermissionUsersResponse },
    { name: "SetNamespacePermission", options: {}, I: SetNamespacePermissionRequest, O: SetNamespacePermissionResponse }
]);
