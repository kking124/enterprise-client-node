// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "policy.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ListValue } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * Policy defines an authorization policy which can be applied to a route or
 * routes
 *
 * @generated from protobuf message pomerium.dashboard.Policy
 */
export interface Policy {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string namespace_id = 10;
     */
    namespaceId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp modified_at = 3;
     */
    modifiedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 4;
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 16;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated string allowed_users = 6;
     */
    allowedUsers: string[];
    /**
     * @generated from protobuf field: repeated string allowed_domains = 8;
     */
    allowedDomains: string[];
    /**
     * @generated from protobuf field: map<string, google.protobuf.ListValue> allowed_idp_claims = 14;
     */
    allowedIdpClaims: {
        [key: string]: ListValue;
    };
    /**
     * custom rego definition in string format
     *
     * @generated from protobuf field: repeated string rego = 9;
     */
    rego: string[];
    /**
     * PPL definition in JSON format
     *
     * @generated from protobuf field: string ppl = 15;
     */
    ppl: string;
    /**
     * policy is automatically applied to all routes in namespace_id and child
     * namespaces
     *
     * @generated from protobuf field: bool enforced = 13;
     */
    enforced: boolean;
    /**
     * @generated from protobuf field: string explanation = 17;
     */
    explanation: string;
    /**
     * @generated from protobuf field: string remediation = 18;
     */
    remediation: string;
    /**
     * @generated from protobuf field: string originator_id = 19;
     */
    originatorId: string;
    /**
     * computed
     *
     * @generated from protobuf field: map<string, string> routes = 11;
     */
    routes: {
        [key: string]: string;
    }; // route id => name
    /**
     * computed
     *
     * @generated from protobuf field: string namespace_name = 12;
     */
    namespaceName: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePolicyRequest
 */
export interface DeletePolicyRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.DeletePolicyResponse
 */
export interface DeletePolicyResponse {
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPolicyRequest
 */
export interface GetPolicyRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message pomerium.dashboard.GetPolicyResponse
 */
export interface GetPolicyResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.Policy policy = 1;
     */
    policy?: Policy;
}
/**
 * ListPoliciesRequest specifies the policies to list
 *
 * @generated from protobuf message pomerium.dashboard.ListPoliciesRequest
 */
export interface ListPoliciesRequest {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * list Policies whose name contains the query string
     *
     * @generated from protobuf field: optional string query = 2;
     */
    query?: string;
    /**
     * list Policies starting from an offset in the total list
     *
     * @generated from protobuf field: optional int64 offset = 3;
     */
    offset?: bigint;
    /**
     * limit the number of entries returned
     *
     * @generated from protobuf field: optional int64 limit = 4;
     */
    limit?: bigint;
    /**
     * sort the Policies by newest, oldest or name
     *
     * @generated from protobuf field: optional string order_by = 5;
     */
    orderBy?: string;
}
/**
 * ListPoliciesResponse is the list of policies found for a ListPoliciesRequest
 *
 * @generated from protobuf message pomerium.dashboard.ListPoliciesResponse
 */
export interface ListPoliciesResponse {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.Policy policies = 1;
     */
    policies: Policy[];
    /**
     * @generated from protobuf field: int64 total_count = 2;
     */
    totalCount: bigint;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetPolicyRequest
 */
export interface SetPolicyRequest {
    /**
     * @generated from protobuf field: pomerium.dashboard.Policy policy = 1;
     */
    policy?: Policy;
}
/**
 * @generated from protobuf message pomerium.dashboard.SetPolicyResponse
 */
export interface SetPolicyResponse {
    /**
     * @generated from protobuf field: pomerium.dashboard.Policy policy = 1;
     */
    policy?: Policy;
}
// @generated message type with reflection information, may provide speed optimized methods
class Policy$Type extends MessageType<Policy> {
    constructor() {
        super("pomerium.dashboard.Policy", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "namespace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "modified_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "allowed_users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "allowed_domains", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "allowed_idp_claims", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ListValue } },
            { no: 9, name: "rego", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "ppl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "enforced", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "explanation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "remediation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "originator_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "routes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 12, name: "namespace_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Policy>): Policy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.namespaceId = "";
        message.name = "";
        message.description = "";
        message.allowedUsers = [];
        message.allowedDomains = [];
        message.allowedIdpClaims = {};
        message.rego = [];
        message.ppl = "";
        message.enforced = false;
        message.explanation = "";
        message.remediation = "";
        message.originatorId = "";
        message.routes = {};
        message.namespaceName = "";
        if (value !== undefined)
            reflectionMergePartial<Policy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Policy): Policy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string namespace_id */ 10:
                    message.namespaceId = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp modified_at */ 3:
                    message.modifiedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.modifiedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 16:
                    message.description = reader.string();
                    break;
                case /* repeated string allowed_users */ 6:
                    message.allowedUsers.push(reader.string());
                    break;
                case /* repeated string allowed_domains */ 8:
                    message.allowedDomains.push(reader.string());
                    break;
                case /* map<string, google.protobuf.ListValue> allowed_idp_claims */ 14:
                    this.binaryReadMap14(message.allowedIdpClaims, reader, options);
                    break;
                case /* repeated string rego */ 9:
                    message.rego.push(reader.string());
                    break;
                case /* string ppl */ 15:
                    message.ppl = reader.string();
                    break;
                case /* bool enforced */ 13:
                    message.enforced = reader.bool();
                    break;
                case /* string explanation */ 17:
                    message.explanation = reader.string();
                    break;
                case /* string remediation */ 18:
                    message.remediation = reader.string();
                    break;
                case /* string originator_id */ 19:
                    message.originatorId = reader.string();
                    break;
                case /* map<string, string> routes */ 11:
                    this.binaryReadMap11(message.routes, reader, options);
                    break;
                case /* string namespace_name */ 12:
                    message.namespaceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: Policy["allowedIdpClaims"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Policy["allowedIdpClaims"] | undefined, val: Policy["allowedIdpClaims"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ListValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field pomerium.dashboard.Policy.allowed_idp_claims");
            }
        }
        map[key ?? ""] = val ?? ListValue.create();
    }
    private binaryReadMap11(map: Policy["routes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Policy["routes"] | undefined, val: Policy["routes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field pomerium.dashboard.Policy.routes");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Policy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string namespace_id = 10; */
        if (message.namespaceId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.namespaceId);
        /* google.protobuf.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp modified_at = 3; */
        if (message.modifiedAt)
            Timestamp.internalBinaryWrite(message.modifiedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 16; */
        if (message.description !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.description);
        /* repeated string allowed_users = 6; */
        for (let i = 0; i < message.allowedUsers.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.allowedUsers[i]);
        /* repeated string allowed_domains = 8; */
        for (let i = 0; i < message.allowedDomains.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.allowedDomains[i]);
        /* map<string, google.protobuf.ListValue> allowed_idp_claims = 14; */
        for (let k of globalThis.Object.keys(message.allowedIdpClaims)) {
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ListValue.internalBinaryWrite(message.allowedIdpClaims[k], writer, options);
            writer.join().join();
        }
        /* repeated string rego = 9; */
        for (let i = 0; i < message.rego.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.rego[i]);
        /* string ppl = 15; */
        if (message.ppl !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.ppl);
        /* bool enforced = 13; */
        if (message.enforced !== false)
            writer.tag(13, WireType.Varint).bool(message.enforced);
        /* string explanation = 17; */
        if (message.explanation !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.explanation);
        /* string remediation = 18; */
        if (message.remediation !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.remediation);
        /* string originator_id = 19; */
        if (message.originatorId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.originatorId);
        /* map<string, string> routes = 11; */
        for (let k of globalThis.Object.keys(message.routes))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.routes[k]).join();
        /* string namespace_name = 12; */
        if (message.namespaceName !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.namespaceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.Policy
 */
export const Policy = new Policy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePolicyRequest$Type extends MessageType<DeletePolicyRequest> {
    constructor() {
        super("pomerium.dashboard.DeletePolicyRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePolicyRequest>): DeletePolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePolicyRequest): DeletePolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePolicyRequest
 */
export const DeletePolicyRequest = new DeletePolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePolicyResponse$Type extends MessageType<DeletePolicyResponse> {
    constructor() {
        super("pomerium.dashboard.DeletePolicyResponse", []);
    }
    create(value?: PartialMessage<DeletePolicyResponse>): DeletePolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeletePolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePolicyResponse): DeletePolicyResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.DeletePolicyResponse
 */
export const DeletePolicyResponse = new DeletePolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPolicyRequest$Type extends MessageType<GetPolicyRequest> {
    constructor() {
        super("pomerium.dashboard.GetPolicyRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPolicyRequest>): GetPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPolicyRequest): GetPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPolicyRequest
 */
export const GetPolicyRequest = new GetPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPolicyResponse$Type extends MessageType<GetPolicyResponse> {
    constructor() {
        super("pomerium.dashboard.GetPolicyResponse", [
            { no: 1, name: "policy", kind: "message", T: () => Policy }
        ]);
    }
    create(value?: PartialMessage<GetPolicyResponse>): GetPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPolicyResponse): GetPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Policy policy */ 1:
                    message.policy = Policy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Policy policy = 1; */
        if (message.policy)
            Policy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.GetPolicyResponse
 */
export const GetPolicyResponse = new GetPolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPoliciesRequest$Type extends MessageType<ListPoliciesRequest> {
    constructor() {
        super("pomerium.dashboard.ListPoliciesRequest", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "query", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "offset", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "limit", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "order_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPoliciesRequest>): ListPoliciesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namespace = "";
        if (value !== undefined)
            reflectionMergePartial<ListPoliciesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPoliciesRequest): ListPoliciesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                case /* optional string query */ 2:
                    message.query = reader.string();
                    break;
                case /* optional int64 offset */ 3:
                    message.offset = reader.int64().toBigInt();
                    break;
                case /* optional int64 limit */ 4:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* optional string order_by */ 5:
                    message.orderBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPoliciesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        /* optional string query = 2; */
        if (message.query !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        /* optional int64 offset = 3; */
        if (message.offset !== undefined)
            writer.tag(3, WireType.Varint).int64(message.offset);
        /* optional int64 limit = 4; */
        if (message.limit !== undefined)
            writer.tag(4, WireType.Varint).int64(message.limit);
        /* optional string order_by = 5; */
        if (message.orderBy !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.orderBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPoliciesRequest
 */
export const ListPoliciesRequest = new ListPoliciesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPoliciesResponse$Type extends MessageType<ListPoliciesResponse> {
    constructor() {
        super("pomerium.dashboard.ListPoliciesResponse", [
            { no: 1, name: "policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Policy },
            { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListPoliciesResponse>): ListPoliciesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policies = [];
        message.totalCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListPoliciesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPoliciesResponse): ListPoliciesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.Policy policies */ 1:
                    message.policies.push(Policy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 total_count */ 2:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPoliciesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.Policy policies = 1; */
        for (let i = 0; i < message.policies.length; i++)
            Policy.internalBinaryWrite(message.policies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 total_count = 2; */
        if (message.totalCount !== 0n)
            writer.tag(2, WireType.Varint).int64(message.totalCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ListPoliciesResponse
 */
export const ListPoliciesResponse = new ListPoliciesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPolicyRequest$Type extends MessageType<SetPolicyRequest> {
    constructor() {
        super("pomerium.dashboard.SetPolicyRequest", [
            { no: 1, name: "policy", kind: "message", T: () => Policy }
        ]);
    }
    create(value?: PartialMessage<SetPolicyRequest>): SetPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPolicyRequest): SetPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Policy policy */ 1:
                    message.policy = Policy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Policy policy = 1; */
        if (message.policy)
            Policy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetPolicyRequest
 */
export const SetPolicyRequest = new SetPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPolicyResponse$Type extends MessageType<SetPolicyResponse> {
    constructor() {
        super("pomerium.dashboard.SetPolicyResponse", [
            { no: 1, name: "policy", kind: "message", T: () => Policy }
        ]);
    }
    create(value?: PartialMessage<SetPolicyResponse>): SetPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPolicyResponse): SetPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pomerium.dashboard.Policy policy */ 1:
                    message.policy = Policy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pomerium.dashboard.Policy policy = 1; */
        if (message.policy)
            Policy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.SetPolicyResponse
 */
export const SetPolicyResponse = new SetPolicyResponse$Type();
/**
 * @generated ServiceType for protobuf service pomerium.dashboard.PolicyService
 */
export const PolicyService = new ServiceType("pomerium.dashboard.PolicyService", [
    { name: "DeletePolicy", options: {}, I: DeletePolicyRequest, O: DeletePolicyResponse },
    { name: "GetPolicy", options: {}, I: GetPolicyRequest, O: GetPolicyResponse },
    { name: "ListPolicies", options: {}, I: ListPoliciesRequest, O: ListPoliciesResponse },
    { name: "SetPolicy", options: {}, I: SetPolicyRequest, O: SetPolicyResponse }
]);
