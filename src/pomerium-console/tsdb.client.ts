// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "tsdb.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TimeSeriesDB } from "./tsdb";
import type { UsageReportResponse } from "./tsdb";
import type { UsageReportRequest } from "./tsdb";
import type { LastErrorResponse } from "./tsdb";
import type { LastErrorRequest } from "./tsdb";
import type { GetStatusResponse } from "./tsdb";
import type { GetStatusRequest } from "./tsdb";
import type { Sample } from "./tsdb";
import type { ServerMetricRequest } from "./tsdb";
import type { ServerMetricSeriesRequest } from "./tsdb";
import type { Instances } from "./tsdb";
import type { GetInstancesRequest } from "./tsdb";
import type { UptimeResponse } from "./tsdb";
import type { UptimeRequest } from "./tsdb";
import type { TimeSeriesResponseMulti } from "./tsdb";
import type { RouteMetricSeriesHistogramRequest } from "./tsdb";
import type { TimeSeriesResponse } from "./tsdb";
import type { RouteMetricSeriesRequest } from "./tsdb";
import type { ScalarBuckets } from "./tsdb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Scalar } from "./tsdb";
import type { RouteMetricChangeRequest } from "./tsdb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * TimeSeriesDB is a generic service that is meant to be able to query for
 * historical metrics and should provide a sufficient abstraction between the UI
 * and underlying time series service, would it be Prometheus, embedded TSDB or
 * other 3rd party provider
 *
 * @generated from protobuf service pomerium.dashboard.TimeSeriesDB
 */
export interface ITimeSeriesDBClient {
    /**
     * returns metric change for a period of time
     *
     * @generated from protobuf rpc: GetRouteMetricChange(pomerium.dashboard.RouteMetricChangeRequest) returns (pomerium.dashboard.Scalar);
     */
    getRouteMetricChange(input: RouteMetricChangeRequest, options?: RpcOptions): UnaryCall<RouteMetricChangeRequest, Scalar>;
    /**
     * returns buckets of values for a given metric
     *
     * @generated from protobuf rpc: GetRouteMetricChangeHistogram(pomerium.dashboard.RouteMetricChangeRequest) returns (pomerium.dashboard.ScalarBuckets);
     */
    getRouteMetricChangeHistogram(input: RouteMetricChangeRequest, options?: RpcOptions): UnaryCall<RouteMetricChangeRequest, ScalarBuckets>;
    /**
     * returns metric change as time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeries(pomerium.dashboard.RouteMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getRouteMetricSeries(input: RouteMetricSeriesRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesRequest, TimeSeriesResponse>;
    /**
     * returns metric change as time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeriesHistogram(pomerium.dashboard.RouteMetricSeriesHistogramRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getRouteMetricSeriesHistogram(input: RouteMetricSeriesHistogramRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesHistogramRequest, TimeSeriesResponse>;
    /**
     * returns multiple annotated time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeriesMulti(pomerium.dashboard.RouteMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponseMulti);
     */
    getRouteMetricSeriesMulti(input: RouteMetricSeriesRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesRequest, TimeSeriesResponseMulti>;
    /**
     * returns service uptime statistics
     *
     * @generated from protobuf rpc: GetUptime(pomerium.dashboard.UptimeRequest) returns (pomerium.dashboard.UptimeResponse);
     */
    getUptime(input: UptimeRequest, options?: RpcOptions): UnaryCall<UptimeRequest, UptimeResponse>;
    /**
     * returns list of system services with metrics
     *
     * @generated from protobuf rpc: GetInstances(pomerium.dashboard.GetInstancesRequest) returns (pomerium.dashboard.Instances);
     */
    getInstances(input: GetInstancesRequest, options?: RpcOptions): UnaryCall<GetInstancesRequest, Instances>;
    /**
     * returns server queries
     *
     * @generated from protobuf rpc: GetServerMetricSeries(pomerium.dashboard.ServerMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getServerMetricSeries(input: ServerMetricSeriesRequest, options?: RpcOptions): UnaryCall<ServerMetricSeriesRequest, TimeSeriesResponse>;
    /**
     * returns current metric value
     *
     * @generated from protobuf rpc: GetServerMetric(pomerium.dashboard.ServerMetricRequest) returns (pomerium.dashboard.Sample);
     */
    getServerMetric(input: ServerMetricRequest, options?: RpcOptions): UnaryCall<ServerMetricRequest, Sample>;
    /**
     * returns current status of scraping targets
     *
     * @generated from protobuf rpc: GetStatus(pomerium.dashboard.GetStatusRequest) returns (pomerium.dashboard.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * returns last known error for a metric, if available
     *
     * @generated from protobuf rpc: GetLastMetricError(pomerium.dashboard.LastErrorRequest) returns (pomerium.dashboard.LastErrorResponse);
     */
    getLastMetricError(input: LastErrorRequest, options?: RpcOptions): UnaryCall<LastErrorRequest, LastErrorResponse>;
    /**
     * returns usage report
     *
     * @generated from protobuf rpc: GetUsageReport(pomerium.dashboard.UsageReportRequest) returns (pomerium.dashboard.UsageReportResponse);
     */
    getUsageReport(input: UsageReportRequest, options?: RpcOptions): UnaryCall<UsageReportRequest, UsageReportResponse>;
}
/**
 * TimeSeriesDB is a generic service that is meant to be able to query for
 * historical metrics and should provide a sufficient abstraction between the UI
 * and underlying time series service, would it be Prometheus, embedded TSDB or
 * other 3rd party provider
 *
 * @generated from protobuf service pomerium.dashboard.TimeSeriesDB
 */
export class TimeSeriesDBClient implements ITimeSeriesDBClient, ServiceInfo {
    typeName = TimeSeriesDB.typeName;
    methods = TimeSeriesDB.methods;
    options = TimeSeriesDB.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * returns metric change for a period of time
     *
     * @generated from protobuf rpc: GetRouteMetricChange(pomerium.dashboard.RouteMetricChangeRequest) returns (pomerium.dashboard.Scalar);
     */
    getRouteMetricChange(input: RouteMetricChangeRequest, options?: RpcOptions): UnaryCall<RouteMetricChangeRequest, Scalar> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteMetricChangeRequest, Scalar>("unary", this._transport, method, opt, input);
    }
    /**
     * returns buckets of values for a given metric
     *
     * @generated from protobuf rpc: GetRouteMetricChangeHistogram(pomerium.dashboard.RouteMetricChangeRequest) returns (pomerium.dashboard.ScalarBuckets);
     */
    getRouteMetricChangeHistogram(input: RouteMetricChangeRequest, options?: RpcOptions): UnaryCall<RouteMetricChangeRequest, ScalarBuckets> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteMetricChangeRequest, ScalarBuckets>("unary", this._transport, method, opt, input);
    }
    /**
     * returns metric change as time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeries(pomerium.dashboard.RouteMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getRouteMetricSeries(input: RouteMetricSeriesRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesRequest, TimeSeriesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteMetricSeriesRequest, TimeSeriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns metric change as time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeriesHistogram(pomerium.dashboard.RouteMetricSeriesHistogramRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getRouteMetricSeriesHistogram(input: RouteMetricSeriesHistogramRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesHistogramRequest, TimeSeriesResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteMetricSeriesHistogramRequest, TimeSeriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns multiple annotated time series
     *
     * @generated from protobuf rpc: GetRouteMetricSeriesMulti(pomerium.dashboard.RouteMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponseMulti);
     */
    getRouteMetricSeriesMulti(input: RouteMetricSeriesRequest, options?: RpcOptions): UnaryCall<RouteMetricSeriesRequest, TimeSeriesResponseMulti> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteMetricSeriesRequest, TimeSeriesResponseMulti>("unary", this._transport, method, opt, input);
    }
    /**
     * returns service uptime statistics
     *
     * @generated from protobuf rpc: GetUptime(pomerium.dashboard.UptimeRequest) returns (pomerium.dashboard.UptimeResponse);
     */
    getUptime(input: UptimeRequest, options?: RpcOptions): UnaryCall<UptimeRequest, UptimeResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UptimeRequest, UptimeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns list of system services with metrics
     *
     * @generated from protobuf rpc: GetInstances(pomerium.dashboard.GetInstancesRequest) returns (pomerium.dashboard.Instances);
     */
    getInstances(input: GetInstancesRequest, options?: RpcOptions): UnaryCall<GetInstancesRequest, Instances> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetInstancesRequest, Instances>("unary", this._transport, method, opt, input);
    }
    /**
     * returns server queries
     *
     * @generated from protobuf rpc: GetServerMetricSeries(pomerium.dashboard.ServerMetricSeriesRequest) returns (pomerium.dashboard.TimeSeriesResponse);
     */
    getServerMetricSeries(input: ServerMetricSeriesRequest, options?: RpcOptions): UnaryCall<ServerMetricSeriesRequest, TimeSeriesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServerMetricSeriesRequest, TimeSeriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns current metric value
     *
     * @generated from protobuf rpc: GetServerMetric(pomerium.dashboard.ServerMetricRequest) returns (pomerium.dashboard.Sample);
     */
    getServerMetric(input: ServerMetricRequest, options?: RpcOptions): UnaryCall<ServerMetricRequest, Sample> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServerMetricRequest, Sample>("unary", this._transport, method, opt, input);
    }
    /**
     * returns current status of scraping targets
     *
     * @generated from protobuf rpc: GetStatus(pomerium.dashboard.GetStatusRequest) returns (pomerium.dashboard.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns last known error for a metric, if available
     *
     * @generated from protobuf rpc: GetLastMetricError(pomerium.dashboard.LastErrorRequest) returns (pomerium.dashboard.LastErrorResponse);
     */
    getLastMetricError(input: LastErrorRequest, options?: RpcOptions): UnaryCall<LastErrorRequest, LastErrorResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<LastErrorRequest, LastErrorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * returns usage report
     *
     * @generated from protobuf rpc: GetUsageReport(pomerium.dashboard.UsageReportRequest) returns (pomerium.dashboard.UsageReportResponse);
     */
    getUsageReport(input: UsageReportRequest, options?: RpcOptions): UnaryCall<UsageReportRequest, UsageReportResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<UsageReportRequest, UsageReportResponse>("unary", this._transport, method, opt, input);
    }
}
