// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "github.com/pomerium/pomerium/pkg/grpc/databroker/databroker.proto" (package "databroker", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataBrokerService } from "./databroker";
import type { SyncLatestResponse } from "./databroker";
import type { SyncLatestRequest } from "./databroker";
import type { SyncResponse } from "./databroker";
import type { SyncRequest } from "./databroker";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SetOptionsResponse } from "./databroker";
import type { SetOptionsRequest } from "./databroker";
import type { RenewLeaseRequest } from "./databroker";
import type { ReleaseLeaseRequest } from "./databroker";
import type { QueryResponse } from "./databroker";
import type { QueryRequest } from "./databroker";
import type { PatchResponse } from "./databroker";
import type { PatchRequest } from "./databroker";
import type { PutResponse } from "./databroker";
import type { PutRequest } from "./databroker";
import type { ListTypesResponse } from "./databroker";
import type { Empty } from "../../../../../../google/protobuf/empty";
import type { GetResponse } from "./databroker";
import type { GetRequest } from "./databroker";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AcquireLeaseResponse } from "./databroker";
import type { AcquireLeaseRequest } from "./databroker";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The DataBrokerService stores key-value data.
 *
 * @generated from protobuf service databroker.DataBrokerService
 */
export interface IDataBrokerServiceClient {
    /**
     * AcquireLease acquires a distributed mutex lease.
     *
     * @generated from protobuf rpc: AcquireLease(databroker.AcquireLeaseRequest) returns (databroker.AcquireLeaseResponse);
     */
    acquireLease(input: AcquireLeaseRequest, options?: RpcOptions): UnaryCall<AcquireLeaseRequest, AcquireLeaseResponse>;
    /**
     * Get gets a record.
     *
     * @generated from protobuf rpc: Get(databroker.GetRequest) returns (databroker.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     * ListTypes lists all the known record types.
     *
     * @generated from protobuf rpc: ListTypes(google.protobuf.Empty) returns (databroker.ListTypesResponse);
     */
    listTypes(input: Empty, options?: RpcOptions): UnaryCall<Empty, ListTypesResponse>;
    /**
     * Put saves a record.
     *
     * @generated from protobuf rpc: Put(databroker.PutRequest) returns (databroker.PutResponse);
     */
    put(input: PutRequest, options?: RpcOptions): UnaryCall<PutRequest, PutResponse>;
    /**
     * Patch updates specific fields of an existing record.
     *
     * @generated from protobuf rpc: Patch(databroker.PatchRequest) returns (databroker.PatchResponse);
     */
    patch(input: PatchRequest, options?: RpcOptions): UnaryCall<PatchRequest, PatchResponse>;
    /**
     * Query queries for records.
     *
     * @generated from protobuf rpc: Query(databroker.QueryRequest) returns (databroker.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse>;
    /**
     * ReleaseLease releases a distributed mutex lease.
     *
     * @generated from protobuf rpc: ReleaseLease(databroker.ReleaseLeaseRequest) returns (google.protobuf.Empty);
     */
    releaseLease(input: ReleaseLeaseRequest, options?: RpcOptions): UnaryCall<ReleaseLeaseRequest, Empty>;
    /**
     * RenewLease renews a distributed mutex lease.
     *
     * @generated from protobuf rpc: RenewLease(databroker.RenewLeaseRequest) returns (google.protobuf.Empty);
     */
    renewLease(input: RenewLeaseRequest, options?: RpcOptions): UnaryCall<RenewLeaseRequest, Empty>;
    /**
     * SetOptions sets the options for a type in the databroker.
     *
     * @generated from protobuf rpc: SetOptions(databroker.SetOptionsRequest) returns (databroker.SetOptionsResponse);
     */
    setOptions(input: SetOptionsRequest, options?: RpcOptions): UnaryCall<SetOptionsRequest, SetOptionsResponse>;
    /**
     * Sync streams changes to records after the specified version.
     *
     * @generated from protobuf rpc: Sync(databroker.SyncRequest) returns (stream databroker.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): ServerStreamingCall<SyncRequest, SyncResponse>;
    /**
     * SyncLatest streams the latest version of every record.
     *
     * @generated from protobuf rpc: SyncLatest(databroker.SyncLatestRequest) returns (stream databroker.SyncLatestResponse);
     */
    syncLatest(input: SyncLatestRequest, options?: RpcOptions): ServerStreamingCall<SyncLatestRequest, SyncLatestResponse>;
}
/**
 * The DataBrokerService stores key-value data.
 *
 * @generated from protobuf service databroker.DataBrokerService
 */
export class DataBrokerServiceClient implements IDataBrokerServiceClient, ServiceInfo {
    typeName = DataBrokerService.typeName;
    methods = DataBrokerService.methods;
    options = DataBrokerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * AcquireLease acquires a distributed mutex lease.
     *
     * @generated from protobuf rpc: AcquireLease(databroker.AcquireLeaseRequest) returns (databroker.AcquireLeaseResponse);
     */
    acquireLease(input: AcquireLeaseRequest, options?: RpcOptions): UnaryCall<AcquireLeaseRequest, AcquireLeaseResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AcquireLeaseRequest, AcquireLeaseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get gets a record.
     *
     * @generated from protobuf rpc: Get(databroker.GetRequest) returns (databroker.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListTypes lists all the known record types.
     *
     * @generated from protobuf rpc: ListTypes(google.protobuf.Empty) returns (databroker.ListTypesResponse);
     */
    listTypes(input: Empty, options?: RpcOptions): UnaryCall<Empty, ListTypesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ListTypesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Put saves a record.
     *
     * @generated from protobuf rpc: Put(databroker.PutRequest) returns (databroker.PutResponse);
     */
    put(input: PutRequest, options?: RpcOptions): UnaryCall<PutRequest, PutResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<PutRequest, PutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Patch updates specific fields of an existing record.
     *
     * @generated from protobuf rpc: Patch(databroker.PatchRequest) returns (databroker.PatchResponse);
     */
    patch(input: PatchRequest, options?: RpcOptions): UnaryCall<PatchRequest, PatchResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PatchRequest, PatchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query queries for records.
     *
     * @generated from protobuf rpc: Query(databroker.QueryRequest) returns (databroker.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryRequest, QueryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ReleaseLease releases a distributed mutex lease.
     *
     * @generated from protobuf rpc: ReleaseLease(databroker.ReleaseLeaseRequest) returns (google.protobuf.Empty);
     */
    releaseLease(input: ReleaseLeaseRequest, options?: RpcOptions): UnaryCall<ReleaseLeaseRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReleaseLeaseRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * RenewLease renews a distributed mutex lease.
     *
     * @generated from protobuf rpc: RenewLease(databroker.RenewLeaseRequest) returns (google.protobuf.Empty);
     */
    renewLease(input: RenewLeaseRequest, options?: RpcOptions): UnaryCall<RenewLeaseRequest, Empty> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RenewLeaseRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * SetOptions sets the options for a type in the databroker.
     *
     * @generated from protobuf rpc: SetOptions(databroker.SetOptionsRequest) returns (databroker.SetOptionsResponse);
     */
    setOptions(input: SetOptionsRequest, options?: RpcOptions): UnaryCall<SetOptionsRequest, SetOptionsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetOptionsRequest, SetOptionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sync streams changes to records after the specified version.
     *
     * @generated from protobuf rpc: Sync(databroker.SyncRequest) returns (stream databroker.SyncResponse);
     */
    sync(input: SyncRequest, options?: RpcOptions): ServerStreamingCall<SyncRequest, SyncResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncRequest, SyncResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * SyncLatest streams the latest version of every record.
     *
     * @generated from protobuf rpc: SyncLatest(databroker.SyncLatestRequest) returns (stream databroker.SyncLatestResponse);
     */
    syncLatest(input: SyncLatestRequest, options?: RpcOptions): ServerStreamingCall<SyncLatestRequest, SyncLatestResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncLatestRequest, SyncLatestResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
