// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "console_config.proto" (package "pomerium.dashboard", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Settings } from "./settings";
import { Route } from "./routes";
import { Policy } from "./policy";
import { Namespace } from "./namespaces";
import { KeyPair } from "./key_chain";
/**
 * @generated from protobuf message pomerium.dashboard.ConsoleConfig
 */
export interface ConsoleConfig {
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.KeyPair key_pairs = 1;
     */
    keyPairs: KeyPair[];
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.Namespace namespaces = 2;
     */
    namespaces: Namespace[];
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.Policy policies = 3;
     */
    policies: Policy[];
    /**
     * @generated from protobuf field: repeated pomerium.dashboard.Route routes = 4;
     */
    routes: Route[];
    /**
     * @generated from protobuf field: pomerium.dashboard.Settings settings = 5;
     */
    settings?: Settings;
}
// @generated message type with reflection information, may provide speed optimized methods
class ConsoleConfig$Type extends MessageType<ConsoleConfig> {
    constructor() {
        super("pomerium.dashboard.ConsoleConfig", [
            { no: 1, name: "key_pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeyPair },
            { no: 2, name: "namespaces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Namespace },
            { no: 3, name: "policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Policy },
            { no: 4, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Route },
            { no: 5, name: "settings", kind: "message", T: () => Settings }
        ]);
    }
    create(value?: PartialMessage<ConsoleConfig>): ConsoleConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyPairs = [];
        message.namespaces = [];
        message.policies = [];
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<ConsoleConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsoleConfig): ConsoleConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pomerium.dashboard.KeyPair key_pairs */ 1:
                    message.keyPairs.push(KeyPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated pomerium.dashboard.Namespace namespaces */ 2:
                    message.namespaces.push(Namespace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated pomerium.dashboard.Policy policies */ 3:
                    message.policies.push(Policy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated pomerium.dashboard.Route routes */ 4:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* pomerium.dashboard.Settings settings */ 5:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsoleConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pomerium.dashboard.KeyPair key_pairs = 1; */
        for (let i = 0; i < message.keyPairs.length; i++)
            KeyPair.internalBinaryWrite(message.keyPairs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.Namespace namespaces = 2; */
        for (let i = 0; i < message.namespaces.length; i++)
            Namespace.internalBinaryWrite(message.namespaces[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.Policy policies = 3; */
        for (let i = 0; i < message.policies.length; i++)
            Policy.internalBinaryWrite(message.policies[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated pomerium.dashboard.Route routes = 4; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* pomerium.dashboard.Settings settings = 5; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.dashboard.ConsoleConfig
 */
export const ConsoleConfig = new ConsoleConfig$Type();
