// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "crypt/crypt.proto" (package "pomerium.crypt", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A SealedMessage is an encrypted protobuf message.
 *
 * @generated from protobuf message pomerium.crypt.SealedMessage
 */
export interface SealedMessage {
    /**
     * The Curve25519 public key used to encrypt the data encryption key.
     *
     * @generated from protobuf field: string key_id = 1;
     */
    keyId: string;
    /**
     * The XChacha20poly1305 key used to encrypt the data,
     * itself stored encrypted by the Curve25519 public key.
     *
     * @generated from protobuf field: bytes data_encryption_key = 2;
     */
    dataEncryptionKey: Uint8Array;
    /**
     * The message type indicates the type of the protobuf message stored encrypted in encrypted_message.
     *
     * @generated from protobuf field: string message_type = 3;
     */
    messageType: string;
    /**
     * An arbitrary encrypted protobuf message (marshaled as protojson before encryption).
     *
     * @generated from protobuf field: bytes encrypted_message = 4;
     */
    encryptedMessage: Uint8Array;
}
/**
 * @generated from protobuf message pomerium.crypt.PublicKeyEncryptionKey
 */
export interface PublicKeyEncryptionKey {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class SealedMessage$Type extends MessageType<SealedMessage> {
    constructor() {
        super("pomerium.crypt.SealedMessage", [
            { no: 1, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data_encryption_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "message_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "encrypted_message", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SealedMessage>): SealedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyId = "";
        message.dataEncryptionKey = new Uint8Array(0);
        message.messageType = "";
        message.encryptedMessage = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SealedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SealedMessage): SealedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_id */ 1:
                    message.keyId = reader.string();
                    break;
                case /* bytes data_encryption_key */ 2:
                    message.dataEncryptionKey = reader.bytes();
                    break;
                case /* string message_type */ 3:
                    message.messageType = reader.string();
                    break;
                case /* bytes encrypted_message */ 4:
                    message.encryptedMessage = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SealedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key_id = 1; */
        if (message.keyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyId);
        /* bytes data_encryption_key = 2; */
        if (message.dataEncryptionKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.dataEncryptionKey);
        /* string message_type = 3; */
        if (message.messageType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageType);
        /* bytes encrypted_message = 4; */
        if (message.encryptedMessage.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.encryptedMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.crypt.SealedMessage
 */
export const SealedMessage = new SealedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicKeyEncryptionKey$Type extends MessageType<PublicKeyEncryptionKey> {
    constructor() {
        super("pomerium.crypt.PublicKeyEncryptionKey", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PublicKeyEncryptionKey>): PublicKeyEncryptionKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<PublicKeyEncryptionKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublicKeyEncryptionKey): PublicKeyEncryptionKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublicKeyEncryptionKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.crypt.PublicKeyEncryptionKey
 */
export const PublicKeyEncryptionKey = new PublicKeyEncryptionKey$Type();
