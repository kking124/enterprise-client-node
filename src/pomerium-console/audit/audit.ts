// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "audit/audit.proto" (package "pomerium.audit", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CheckResponse } from "../envoy/service/auth/v3/external_auth";
import { CheckRequest } from "../envoy/service/auth/v3/external_auth";
/**
 * @generated from protobuf message pomerium.audit.Record
 */
export interface Record {
    /**
     * @generated from protobuf field: envoy.service.auth.v3.CheckRequest request = 1;
     */
    request?: CheckRequest;
    /**
     * @generated from protobuf field: envoy.service.auth.v3.CheckResponse response = 2;
     */
    response?: CheckResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
    constructor() {
        super("pomerium.audit.Record", [
            { no: 1, name: "request", kind: "message", T: () => CheckRequest },
            { no: 2, name: "response", kind: "message", T: () => CheckResponse }
        ]);
    }
    create(value?: PartialMessage<Record>): Record {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record): Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* envoy.service.auth.v3.CheckRequest request */ 1:
                    message.request = CheckRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* envoy.service.auth.v3.CheckResponse response */ 2:
                    message.response = CheckResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* envoy.service.auth.v3.CheckRequest request = 1; */
        if (message.request)
            CheckRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* envoy.service.auth.v3.CheckResponse response = 2; */
        if (message.response)
            CheckResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pomerium.audit.Record
 */
export const Record = new Record$Type();
